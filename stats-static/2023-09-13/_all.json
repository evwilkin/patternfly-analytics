{
  "files": {
    "total": {
      "withPatternfly": {},
      "js": 134,
      "jsx": 10,
      "ts": 235,
      "tsx": 297,
      "css": 17,
      "scss": 44
    }
  },
  "imports": {
    "@patternfly/react-log-viewer": {
      "LogViewer": 10,
      "LogViewerSearch": 6,
      "LogViewerContext": 1,
      "ExtendedButton": 1
    },
    "@patternfly/react-core": {
      "Badge": 4,
      "Button": 38,
      "Tooltip": 12,
      "Toolbar": 11,
      "ToolbarContent": 11,
      "ToolbarGroup": 7,
      "ToolbarItem": 14,
      "ToolbarToggleGroup": 3,
      "Checkbox": 7,
      "Banner": 2,
      "Select": 5,
      "SelectOption": 5,
      "PageSection": 9,
      "PageSectionVariants": 1,
      "Title": 14,
      "SearchInput": 2,
      "SearchInputProps": 1,
      "Card": 2,
      "CardHeader": 1,
      "CardTitle": 2,
      "CardBody": 2,
      "CardFooter": 1,
      "getUniqueId": 1,
      "Text": 9,
      "TextVariants": 6,
      "Page": 5,
      "Brand": 2,
      "Nav": 2,
      "NavList": 2,
      "NavItem": 2,
      "PageSidebar": 2,
      "ButtonVariant": 2,
      "Switch": 2,
      "PageSidebarBody": 2,
      "Divider": 5,
      "Gallery": 3,
      "GalleryItem": 3,
      "TextContent": 5,
      "Form": 3,
      "FormGroup": 3,
      "TextInput": 4,
      "Popover": 5,
      "Split": 3,
      "SplitItem": 3,
      "Modal": 3,
      "ModalVariant": 3,
      "Stack": 4,
      "StackItem": 4,
      "ToggleGroup": 1,
      "ToggleGroupItem": 1,
      "TextList": 1,
      "TextListItem": 1,
      "Flex": 4,
      "FlexItem": 3,
      "Label": 1,
      "ToolbarProps": 1,
      "MenuToggle": 5,
      "MenuToggleElement": 4,
      "SelectList": 4,
      "Accordion": 1,
      "AccordionItem": 1,
      "AccordionToggle": 1,
      "AccordionContent": 1,
      "Alert": 5,
      "CodeBlock": 1,
      "ModalProps": 1,
      "useIsomorphicLayoutEffect": 2,
      "Icon": 2,
      "PopoverPosition": 1,
      "WizardNavItem": 2,
      "ExpandableSection": 2,
      "List": 3,
      "ListItem": 2,
      "Radio": 2,
      "Drawer": 3,
      "DrawerContent": 3,
      "DrawerContentBody": 3,
      "DrawerActions": 2,
      "DrawerCloseButton": 2,
      "DrawerHead": 2,
      "DrawerPanelBody": 2,
      "DrawerPanelContent": 3,
      "EmptyState": 3,
      "EmptyStateBody": 3,
      "EmptyStateIcon": 3,
      "EmptyStateFooter": 3,
      "EmptyStateActions": 1,
      "EmptyStateHeader": 3,
      "debounce": 3,
      "DescriptionList": 2,
      "DescriptionListGroup": 2,
      "DescriptionListTerm": 2,
      "DescriptionListDescription": 2,
      "Spinner": 3,
      "canUseDOM": 2,
      "TextArea": 1,
      "ValidatedOptions": 1,
      "Grid": 1,
      "GridItem": 1,
      "Avatar": 1,
      "NavExpandable": 1,
      "Masthead": 1,
      "MastheadToggle": 1,
      "PageToggleButton": 1,
      "MastheadContent": 1,
      "MastheadBrand": 1,
      "MastheadMain": 1,
      "PopoverProps": 2,
      "Tab": 9,
      "Tabs": 9,
      "TabTitleText": 9,
      "Dropdown": 4,
      "DropdownItem": 3,
      "DropdownList": 2,
      "TooltipPosition": 2,
      "GenerateId": 2,
      "TooltipProps": 1
    },
    "@patternfly/react-core/deprecated": {
      "Select-deprecated": 3,
      "SelectOption-deprecated": 3,
      "PageHeaderTools-deprecated": 1,
      "PageHeaderToolsItem-deprecated": 1,
      "PageHeader-deprecated": 1,
      "SelectOptionObject-deprecated": 1,
      "SelectVariant-deprecated": 1,
      "Dropdown-deprecated": 2,
      "DropdownItem-deprecated": 2,
      "DropdownToggle-deprecated": 2
    },
    "@patternfly/react-icons/dist/esm/icons/outlined-play-circle-icon": {
      "OutlinedPlayCircleIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/expand-icon": {
      "ExpandIcon": 4
    },
    "@patternfly/react-icons/dist/esm/icons/pause-icon": {
      "PauseIcon": 3
    },
    "@patternfly/react-icons/dist/esm/icons/play-icon": {
      "PlayIcon": 3
    },
    "@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon": {
      "EllipsisVIcon": 4
    },
    "@patternfly/react-icons/dist/esm/icons/download-icon": {
      "DownloadIcon": 3
    },
    "@patternfly/documentation-framework/components": {
      "AutoLinkHeader": 25,
      "Example": 25,
      "Link": 25
    },
    "@patternfly/react-icons": {
      "OutlinedPlayCircleIcon": 1,
      "ExternalLinkAltIcon": 1,
      "RegionsIcon": 10,
      "FolderOpenIcon": 7
    },
    "react';\\nimport { data } from '../examples/realTestData';\\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\\nimport {\\n  Badge,\\n  Button,\\n  Select,\\n  SelectOption,\\n  Tooltip,\\n  Toolbar,\\n  ToolbarContent,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  ToolbarToggleGroup\\n} from '@patternfly/react-core';\\nimport OutlinedPlayCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-play-circle-icon';\\nimport ExpandIcon from '@patternfly/react-icons/dist/esm/icons/expand-icon';\\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\\nimport EllipsisVIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon';\\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\\n\\nComplexToolbarLogViewer = () => {\\n  const dataSources = {\\n    'container-1': { type: 'C', id: 'data1' },\\n    'container-2': { type: 'D', id: 'data2' },\\n    'container-3': { type: 'E', id: 'data3' }\\n  };\\n  const [isPaused, setIsPaused] = React.useState(false);\\n  const [isFullScreen, setIsFullScreen] = React.useState(false);\\n  const [itemCount, setItemCount] = React.useState(1);\\n  const [currentItemCount, setCurrentItemCount] = React.useState(0);\\n  const [renderData, setRenderData] = React.useState('');\\n  const [selectedDataSource, setSelectedDataSource] = React.useState('container-1');\\n  const [selectDataSourceOpen, setSelectDataSourceOpen] = React.useState(false);\\n  const [timer, setTimer] = React.useState(null);\\n  const [selectedData, setSelectedData] = React.useState(data[dataSources[selectedDataSource].id].split('\\\\n'));\\n  const [buffer, setBuffer] = React.useState([]);\\n  const [linesBehind, setLinesBehind] = React.useState(0);\\n  const logViewerRef = React.useRef();\\n\\n  React.useEffect(() => {\\n    setTimer(\\n      window.setInterval(() => {\\n        setItemCount(itemCount => itemCount + 1);\\n      }, 500)\\n    );\\n    return () => {\\n      window.clearInterval(timer);\\n    };\\n  }, []);\\n\\n  React.useEffect(() => {\\n    if (itemCount > selectedData.length) {\\n      window.clearInterval(timer);\\n    } else {\\n      setBuffer(selectedData.slice(0, itemCount));\\n    }\\n  }, [itemCount]);\\n\\n  React.useEffect(() => {\\n    if (!isPaused && buffer.length > 0) {\\n      setCurrentItemCount(buffer.length);\\n      setRenderData(buffer.join('\\\\n'));\\n      if (logViewerRef && logViewerRef.current) {\\n        logViewerRef.current.scrollToBottom();\\n      }\\n    } else if (buffer.length !== currentItemCount) {\\n      setLinesBehind(buffer.length - currentItemCount);\\n    } else {\\n      setLinesBehind(0);\\n    }\\n  }, [isPaused, buffer]);\\n\\n  const onExpandClick = event => {\\n    const element = document.querySelector('#complex-toolbar-demo');\\n\\n    if (!isFullScreen) {\\n      if (element.requestFullscreen) {\\n        element.requestFullscreen();\\n      } else if (element.mozRequestFullScreen) {\\n        element.mozRequestFullScreen();\\n      } else if (element.webkitRequestFullScreen) {\\n        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\\n      }\\n      setIsFullScreen(true);\\n    } else {\\n      if (document.exitFullscreen) {\\n        document.exitFullscreen();\\n      } else if (document.webkitExitFullscreen) {\\n        /* Safari */\\n        document.webkitExitFullscreen();\\n      } else if (document.msExitFullscreen) {\\n        /* IE11 */\\n        document.msExitFullscreen();\\n      }\\n      setIsFullScreen(false);\\n    }\\n  };\\n\\n  const onDownloadClick = () => {\\n    const element = document.createElement('a');\\n    const dataToDownload = [data[dataSources[selectedDataSource].id]];\\n    const file = new Blob(dataToDownload, { type: 'text/plain' });\\n    element.href = URL.createObjectURL(file);\\n    element.download = `${selectedDataSource}.txt`;\\n    document.body.appendChild(element);\\n    element.click();\\n    document.body.removeChild(element);\\n  };\\n\\n  const onScroll = ({ scrollOffsetToBottom, scrollDirection, scrollUpdateWasRequested }) => {\\n    if (!scrollUpdateWasRequested) {\\n      if (scrollOffsetToBottom > 0) {\\n        setIsPaused(true);\\n      } else {\\n        setIsPaused(false);\\n      }\\n    }\\n  };\\n\\n  const selectDataSourceMenu = Object.entries(dataSources).map(([value, { type }]) => (\\n    <SelectOption\\n      key={value}\\n      value={value}\\n      isSelected={selectedDataSource === value}\\n      isChecked={selectedDataSource === value}\\n    >\\n      <Badge key={value}>{type}</Badge>\\n      {` ${value}`}\\n    </SelectOption>\\n  ));\\n\\n  const selectDataSourcePlaceholder = (\\n    <React.Fragment>\\n      <Badge>{dataSources[selectedDataSource].type}</Badge>\\n      {` ${selectedDataSource}`}\\n    </React.Fragment>\\n  );\\n\\n  const ControlButton = () => {\\n    return (\\n      <Button\\n        variant={isPaused ? 'plain' : 'link'}\\n        onClick={() => {\\n          setIsPaused(!isPaused);\\n        }}\\n      >\\n        {isPaused ? <PlayIcon /> : <PauseIcon />}\\n        {isPaused ? ` Resume Log` : ` Pause Log`}\\n      </Button>\\n    );\\n  };\\n\\n  const leftAlignedToolbarGroup = (\\n    <React.Fragment>\\n      <ToolbarToggleGroup toggleIcon={<EllipsisVIcon />} breakpoint=\\\"md\\\">\\n        <ToolbarItem variant=\\\"search-filter\\\">\\n          <Select\\n            onToggle={isOpen => setSelectDataSourceOpen(isOpen)}\\n            onSelect={(event, selection) => {\\n              setSelectDataSourceOpen(false);\\n              setSelectedDataSource(selection);\\n              setSelectedData(data[dataSources[selection].id].split('\\\\n'));\\n              setLinesBehind(0);\\n              setBuffer([]);\\n              setItemCount(1);\\n              setCurrentItemCount(0);\\n            }}\\n            selections={selectedDataSource}\\n            isOpen={selectDataSourceOpen}\\n            placeholderText={selectDataSourcePlaceholder}\\n          >\\n            {selectDataSourceMenu}\\n          </Select>\\n        </ToolbarItem>\\n        <ToolbarItem variant=\\\"search-filter\\\">\\n          <LogViewerSearch onFocus={e => setIsPaused(true)} placeholder=\\\"Search\\\" />\\n        </ToolbarItem>\\n      </ToolbarToggleGroup>\\n      <ToolbarItem>\\n        <ControlButton />\\n      </ToolbarItem>\\n    </React.Fragment>\\n  );\\n\\n  const rightAlignedToolbarGroup = (\\n    <React.Fragment>\\n      <ToolbarGroup variant=\\\"icon-button-group\\\">\\n        <ToolbarItem>\\n          <Tooltip position=\\\"top\\\" content={<div>Download</div>}>\\n            <Button onClick={onDownloadClick} variant=\\\"plain\\\" aria-label=\\\"Download current logs\\\">\\n              <DownloadIcon />\\n            </Button>\\n          </Tooltip>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <Tooltip position=\\\"top\\\" content={<div>Expand</div>}>\\n            <Button onClick={onExpandClick} variant=\\\"plain\\\" aria-label=\\\"View log viewer in full screen\\\">\\n              <ExpandIcon />\\n            </Button>\\n          </Tooltip>\\n        </ToolbarItem>\\n      </ToolbarGroup>\\n    </React.Fragment>\\n  );\\n\\n  const FooterButton = () => {\\n    const handleClick = e => {\\n      setIsPaused(false);\\n    };\\n    return (\\n      <Button onClick={handleClick} isBlock>\\n        <OutlinedPlayCircleIcon />\\n        resume {linesBehind === 0 ? null : `and show ${linesBehind} lines`}\\n      </Button>\\n    );\\n  };\\n  return (\\n    <LogViewer\\n      data={renderData}\\n      id=\\\"complex-toolbar-demo\\\"\\n      scrollToRow={currentItemCount}\\n      innerRef={logViewerRef}\\n      height={isFullScreen ? '100%' : 600}\\n      toolbar={\\n        <Toolbar>\\n          <ToolbarContent>\\n            <ToolbarGroup alignment={{ default: 'alignLeft' }}>{leftAlignedToolbarGroup}</ToolbarGroup>\\n            <ToolbarGroup alignment={{ default: 'alignRight' }}>{rightAlignedToolbarGroup}</ToolbarGroup>\\n          </ToolbarContent>\\n        </Toolbar>\\n      }\\n      overScanCount={10}\\n      footer={isPaused && <FooterButton />}\\n      onScroll={onScroll}\\n    />\\n  );\\n};\\n\",\"title\":\"With complex toolbar\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { data } from '../examples/realTestData';\\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\\nimport {\\n\\tBadge,\\n\\tButton,\\n\\tTooltip,\\n\\tToolbar,\\n\\tToolbarContent,\\n\\tToolbarGroup,\\n\\tToolbarItem,\\n\\tToolbarToggleGroup\\n} from '@patternfly/react-core';\\nimport {\\n\\tSelect as SelectDeprecated,\\n\\tSelectOption as SelectOptionDeprecated\\n} from '@patternfly/react-core/deprecated';\\nimport OutlinedPlayCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-play-circle-icon';\\nimport ExpandIcon from '@patternfly/react-icons/dist/esm/icons/expand-icon';\\nimport PauseIcon from '@patternfly/react-icons/dist/esm/icons/pause-icon';\\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\\nimport EllipsisVIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon';\\nimport DownloadIcon from '@patternfly/react-icons/dist/esm/icons/download-icon';\\n\\nconst ComplexToolbarLogViewer = () => {\\n  const dataSources = {\\n    'container-1': { type: 'C', id: 'data1' },\\n    'container-2': { type: 'D', id: 'data2' },\\n    'container-3': { type: 'E', id: 'data3' }\\n  };\\n  const [isPaused, setIsPaused] = React.useState(false);\\n  const [isFullScreen, setIsFullScreen] = React.useState(false);\\n  const [itemCount, setItemCount] = React.useState(1);\\n  const [currentItemCount, setCurrentItemCount] = React.useState(0);\\n  const [renderData, setRenderData] = React.useState('');\\n  const [selectedDataSource, setSelectedDataSource] = React.useState('container-1');\\n  const [selectDataSourceOpen, setSelectDataSourceOpen] = React.useState(false);\\n  const [timer, setTimer] = React.useState(null);\\n  const [selectedData, setSelectedData] = React.useState(data[dataSources[selectedDataSource].id].split('\\\\n'));\\n  const [buffer, setBuffer] = React.useState([]);\\n  const [linesBehind, setLinesBehind] = React.useState(0);\\n  const logViewerRef = React.useRef();\\n\\n  React.useEffect(() => {\\n    setTimer(\\n      window.setInterval(() => {\\n        setItemCount(itemCount => itemCount + 1);\\n      }, 500)\\n    );\\n    return () => {\\n      window.clearInterval(timer);\\n    };\\n  }, []);\\n\\n  React.useEffect(() => {\\n    if (itemCount > selectedData.length) {\\n      window.clearInterval(timer);\\n    } else {\\n      setBuffer(selectedData.slice(0, itemCount));\\n    }\\n  }, [itemCount]);\\n\\n  React.useEffect(() => {\\n    if (!isPaused && buffer.length > 0) {\\n      setCurrentItemCount(buffer.length);\\n      setRenderData(buffer.join('\\\\n'));\\n      if (logViewerRef && logViewerRef.current) {\\n        logViewerRef.current.scrollToBottom();\\n      }\\n    } else if (buffer.length !== currentItemCount) {\\n      setLinesBehind(buffer.length - currentItemCount);\\n    } else {\\n      setLinesBehind(0);\\n    }\\n  }, [isPaused, buffer]);\\n\\n  const onExpandClick = _event => {\\n    const element = document.querySelector('#complex-toolbar-demo');\\n\\n    if (!isFullScreen) {\\n      if (element.requestFullscreen) {\\n        element.requestFullscreen();\\n      } else if (element.mozRequestFullScreen) {\\n        element.mozRequestFullScreen();\\n      } else if (element.webkitRequestFullScreen) {\\n        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\\n      }\\n      setIsFullScreen(true);\\n    } else {\\n      if (document.exitFullscreen) {\\n        document.exitFullscreen();\\n      } else if (document.webkitExitFullscreen) {\\n        /* Safari */\\n        document.webkitExitFullscreen();\\n      } else if (document.msExitFullscreen) {\\n        /* IE11 */\\n        document.msExitFullscreen();\\n      }\\n      setIsFullScreen(false);\\n    }\\n  };\\n\\n  const onDownloadClick = () => {\\n    const element = document.createElement('a');\\n    const dataToDownload = [data[dataSources[selectedDataSource].id]];\\n    const file = new Blob(dataToDownload, { type: 'text/plain' });\\n    element.href = URL.createObjectURL(file);\\n    element.download = `${selectedDataSource}.txt`;\\n    document.body.appendChild(element);\\n    element.click();\\n    document.body.removeChild(element);\\n  };\\n\\n  const onScroll = ({ scrollOffsetToBottom, _scrollDirection, scrollUpdateWasRequested }) => {\\n    if (!scrollUpdateWasRequested) {\\n      if (scrollOffsetToBottom > 0) {\\n        setIsPaused(true);\\n      } else {\\n        setIsPaused(false);\\n      }\\n    }\\n  };\\n\\n  const selectDataSourceMenu = Object.entries(dataSources).map(([value, { type }]) => (\\n    <SelectOptionDeprecated\\n      key={value}\\n      value={value}\\n      isSelected={selectedDataSource === value}\\n      isChecked={selectedDataSource === value}\\n    >\\n      <Badge key={value}>{type}</Badge>\\n      {` ${value}`}\\n    </SelectOptionDeprecated>\\n  ));\\n\\n  const selectDataSourcePlaceholder = (\\n    <React.Fragment>\\n      <Badge>{dataSources[selectedDataSource].type}</Badge>\\n      {` ${selectedDataSource}`}\\n    </React.Fragment>\\n  );\\n\\n  const ControlButton = () => (\\n      <Button\\n        variant={isPaused ? 'plain' : 'link'}\\n        onClick={() => {\\n          setIsPaused(!isPaused);\\n        }}\\n      >\\n        {isPaused ? <PlayIcon /> : <PauseIcon />}\\n        {isPaused ? ` Resume Log` : ` Pause Log`}\\n      </Button>\\n    );\\n    \\n  const leftAlignedToolbarGroup = (\\n    <React.Fragment>\\n      <ToolbarToggleGroup toggleIcon={<EllipsisVIcon />} breakpoint=\\\"md\\\">\\n        <ToolbarItem variant=\\\"search-filter\\\">\\n          <SelectDeprecated\\n            onToggle={(_event, isOpen) => setSelectDataSourceOpen(isOpen)}\\n            onSelect={(event, selection) => {\\n              setSelectDataSourceOpen(false);\\n              setSelectedDataSource(selection);\\n              setSelectedData(data[dataSources[selection].id].split('\\\\n'));\\n              setLinesBehind(0);\\n              setBuffer([]);\\n              setItemCount(1);\\n              setCurrentItemCount(0);\\n            }}\\n            selections={selectedDataSource}\\n            isOpen={selectDataSourceOpen}\\n            placeholderText={selectDataSourcePlaceholder}\\n          >\\n            {selectDataSourceMenu}\\n          </SelectDeprecated>\\n        </ToolbarItem>\\n        <ToolbarItem variant=\\\"search-filter\\\">\\n          <LogViewerSearch onFocus={_e => setIsPaused(true)} placeholder=\\\"Search\\\" />\\n        </ToolbarItem>\\n      </ToolbarToggleGroup>\\n      <ToolbarItem>\\n        <ControlButton />\\n      </ToolbarItem>\\n    </React.Fragment>\\n  );\\n\\n  const rightAlignedToolbarGroup = (\\n    <React.Fragment>\\n      <ToolbarGroup variant=\\\"icon-button-group\\\">\\n        <ToolbarItem>\\n          <Tooltip position=\\\"top\\\" content={<div>Download</div>}>\\n            <Button onClick={onDownloadClick} variant=\\\"plain\\\" aria-label=\\\"Download current logs\\\">\\n              <DownloadIcon />\\n            </Button>\\n          </Tooltip>\\n        </ToolbarItem>\\n        <ToolbarItem>\\n          <Tooltip position=\\\"top\\\" content={<div>Expand</div>}>\\n            <Button onClick={onExpandClick} variant=\\\"plain\\\" aria-label=\\\"View log viewer in full screen\\\">\\n              <ExpandIcon />\\n            </Button>\\n          </Tooltip>\\n        </ToolbarItem>\\n      </ToolbarGroup>\\n    </React.Fragment>\\n  );\\n\\n  const FooterButton = () => {\\n    const handleClick = _e => {\\n      setIsPaused(false);\\n    };\\n    return (\\n      <Button onClick={handleClick} isBlock>\\n        <OutlinedPlayCircleIcon />\\n        resume {linesBehind === 0 ? null : `and show ${linesBehind} lines`}\\n      </Button>\\n    );\\n  };\\n  return (\\n    <LogViewer\\n      data={renderData}\\n      id=\\\"complex-toolbar-demo\\\"\\n      scrollToRow={currentItemCount}\\n      innerRef={logViewerRef}\\n      height={isFullScreen ? '100%' : 600}\\n      toolbar={\\n        <Toolbar>\\n          <ToolbarContent>\\n            <ToolbarGroup align={{ default: 'alignLeft' }}>{leftAlignedToolbarGroup}</ToolbarGroup>\\n            <ToolbarGroup align={{ default: 'alignRight' }}>{rightAlignedToolbarGroup}</ToolbarGroup>\\n          </ToolbarContent>\\n        </Toolbar>\\n      }\\n      overScanCount={10}\\n      footer={isPaused && <FooterButton />}\\n      onScroll={onScroll}\\n    />\\n  );\\n};\\n\\nexport default ComplexToolbarLogViewer;\",\"title\":\"With complex toolbar\",\"lang\":\"js": {
      "React-deprecated": 1
    },
    "react';\\nimport { data } from './realTestData';\\nimport { LogViewer } from '@patternfly/react-log-viewer';\\nimport { Checkbox } from '@patternfly/react-core';\\n\\nconst BasicLogViewer = () => {\\n  const [isDarkTheme, setIsDarkTheme] = React.useState(false);\\n\\n  return (\\n    <React.Fragment>\\n      <Checkbox\\n        label=\\\"Dark theme\\\"\\n        isChecked={isDarkTheme}\\n        onChange={(_event, value) => setIsDarkTheme(value)}\\n        aria-label=\\\"toggle dark theme checkbox\\\"\\n        id=\\\"toggle-dark-theme\\\"\\n        name=\\\"toggle-dark-theme\\\"\\n      />\\n      <LogViewer hasLineNumbers={false} height={300} data={data.data} theme={isDarkTheme ? 'dark' : 'light'} />\\n    </React.Fragment>\\n  );\\n};\\n\\nexport default BasicLogViewer;\",\"title\":\"Basic\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { data } from './realTestData';\\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\\nimport { Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\\n\\nconst BasicSearchLogViewer = () => (\\n    <LogViewer\\n      data={data.data}\\n      toolbar={\\n        <Toolbar>\\n          <ToolbarContent>\\n            <ToolbarItem>\\n              <LogViewerSearch placeholder=\\\"Search value\\\" />\\n            </ToolbarItem>\\n          </ToolbarContent>\\n        </Toolbar>\\n      }\\n    />\\n  );\\n\\nexport default BasicSearchLogViewer;\",\"title\":\"With search\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { data } from './realTestData';\\nimport { LogViewer, LogViewerSearch } from '@patternfly/react-log-viewer';\\nimport { Toolbar, ToolbarContent, ToolbarItem, Button, Checkbox } from '@patternfly/react-core';\\n\\nconst CustomControlLogViewer = () => {\\n  const [isTextWrapped, setIsTextWrapped] = React.useState(false);\\n  const onActionClick = () => {\\n    console.log('clicked test action button');\\n  };\\n\\n  const onPrintClick = () => {\\n    console.log('clicked console print button');\\n  };\\n\\n  return (\\n    <LogViewer\\n      data={data.data}\\n      isTextWrapped={isTextWrapped}\\n      toolbar={\\n        <Toolbar>\\n          <ToolbarContent>\\n            <ToolbarItem>\\n              <Button onClick={onActionClick} variant=\\\"control\\\">\\n                Test Action\\n              </Button>\\n            </ToolbarItem>\\n            <ToolbarItem>\\n              <LogViewerSearch placeholder=\\\"Search\\\" />\\n            </ToolbarItem>\\n            <ToolbarItem>\\n              <Button onClick={onPrintClick} variant=\\\"control\\\">\\n                Print to Console\\n              </Button>\\n            </ToolbarItem>\\n            <ToolbarItem alignSelf='center'>\\n              <Checkbox label=\\\"Wrap text\\\" aria-label=\\\"wrap text checkbox\\\" isChecked={isTextWrapped} id=\\\"wrap-text-checkbox\\\" onChange={(_event, value) => setIsTextWrapped(value)} />\\n            </ToolbarItem>\\n          </ToolbarContent>\\n        </Toolbar>\\n      }\\n    />\\n  );\\n};\\n\\nexport default CustomControlLogViewer;\",\"title\":\"With complex toolbar\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { data } from './realTestData';\\nimport { LogViewer } from '@patternfly/react-log-viewer';\\nimport { Banner } from '@patternfly/react-core';\\n\\nconst HeaderComponentLogViewer = () => (\\n    <LogViewer\\n      hasLineNumbers={false}\\n      height={300}\\n      data={data.data}\\n      theme=\\\"dark\\\"\\n      header={<Banner>5019 lines</Banner>}\\n    />\\n  );\\n\\nexport default HeaderComponentLogViewer;\",\"title\":\"With header component\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { data } from './realTestData';\\nimport { LogViewer } from '@patternfly/react-log-viewer';\\nimport { Button } from '@patternfly/react-core';\\n\\nconst FooterComponentLogViewer = () => {\\n  const logViewerRef = React.useRef();\\n  const FooterButton = () => {\\n    const handleClick = () => {\\n      logViewerRef.current.scrollToBottom();\\n    };\\n    return <Button onClick={handleClick}>Jump to the bottom</Button>;\\n  };\\n\\n  return (\\n    <LogViewer\\n      ref={logViewerRef}\\n      hasLineNumbers={false}\\n      height={300}\\n      data={data.data}\\n      theme=\\\"dark\\\"\\n      footer={<FooterButton />}\\n    />\\n  );\\n};\\n\\nexport default FooterComponentLogViewer;\",\"title\":\"With footer component\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { data } from './realTestData.js';\\nimport { LogViewer } from '@patternfly/react-log-viewer';\\n\\nconst ANSIColorLogViewer = () => (\\n    <LogViewer\\n      hasLineNumbers={false}\\n      height={300}\\n      data={data.data4}\\n      theme=\\\"dark\\\"\\n    />\\n  );\\n\\n  export default ANSIColorLogViewer;\",\"title\":\"With ANSI color logs\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { ExtendedButton } from '@patternfly/react-log-viewer';\\n\\nexport const BasicExample: React.FunctionComponent = () => <ExtendedButton>My custom extension button</ExtendedButton>;\\n\",\"title\":\"Example\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { ExtendedButton } from '@patternfly/react-log-viewer';\\n\\nexport const BasicExample: React.FunctionComponent = () => <ExtendedButton>My custom extension button</ExtendedButton>;\\n\",\"title\":\"Fullscreen example\",\"lang\":\"js\",\"isFullscreen": {
      "React": 1
    },
    "@patternfly/react-styles": {
      "css": 62
    },
    "@patternfly/react-styles/css/components/LogViewer/log-viewer": {
      "styles": 2
    },
    "@patternfly/react-catalog-view-extension": {
      "CatalogItemHeader": 4,
      "CatalogTile": 6,
      "CatalogTileBadge": 4,
      "FilterSidePanel": 2,
      "FilterSidePanelCategory": 2,
      "FilterSidePanelCategoryItem": 2,
      "PropertiesSidePanel": 2,
      "PropertyItem": 2,
      "VerticalTabs": 2,
      "VerticalTabsTab": 2
    },
    "react';\\nimport { CatalogItemHeader } from '@patternfly/react-catalog-view-extension';\\nimport pfLogo2 from './examples/pfLogo2.svg';\\n\\nconst Basic = () => (\\n  <CatalogItemHeader\\n    iconImg={pfLogo2}\\n    title=\\\"PatternFly\\\"\\n    />\\n)\",\"title\":\"Basic\",\"lang\":\"js": {
      "React": 4
    },
    "react';\\nimport { CatalogItemHeader } from '@patternfly/react-catalog-view-extension';\\nimport pfLogo2 from './examples/pfLogo2.svg';\\n\\nconst WithVendorDescription = () => (\\n  <CatalogItemHeader\\n    iconImg={pfLogo2}\\n    title=\\\"Patternfly-React\\\"\\n    vendor={\\n      <span>\\n        provided by <a href=\\\"http://redhat.com\\\">Red Hat</a>\\n      </span>\\n    }\\n  />\\n)\",\"title\":\"With vendor description\",\"lang\":\"js": {
      "React": 3
    },
    "@patternfly/react-icons/dist/esm/icons/cog-icon": {
      "CogIcon": 5
    },
    "@patternfly/react-icons/dist/esm/icons/outlined-check-circle-icon": {
      "OutlinedCheckCircleIcon": 5
    },
    "react';\\nimport { CatalogTile, CatalogTileBadge } from '@patternfly/react-catalog-view-extension';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport pfLogo2 from './pfLogo2.svg';\\nimport '../../../../dist/css/react-catalog-view-extension.css';\\n\\nconst BasicFeaturedTile = () => (\\n  <CatalogTile\\n    id=\\\"simple-tile\\\"\\n    featured\\n    iconImg={pfLogo2}\\n    iconAlt=\\\"PatternFly logo\\\"\\n    badges={[\\n      <CatalogTileBadge title=\\\"Certified\\\">\\n        <CogIcon />\\n      </CatalogTileBadge>\\n    ]}\\n    title=\\\"Patternfly-React\\\"\\n    vendor=\\\"provided by Red Hat\\\"\\n    description={\\n      'This is a very, very long description that should be truncated after three lines. ' +\\n      'Three lines is the default for cards without a footer. Cards with a footer are truncated after one line. Truncation function use is deprecated; please pass in a maxDescriptionLength of -1 to override it. ' +\\n      'This has changed from PatternFly 3.'\\n    }\\n  />\\n)\",\"title\":\"Basic featured tile\",\"lang\":\"js": {
      "React": 4
    },
    "react';\\nimport { CatalogTile, CatalogTileBadge } from '@patternfly/react-catalog-view-extension';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport OutlinedCheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-check-circle-icon';\\nimport pfLogo2 from './pfLogo2.svg';\\n\\nconst BasicWithFooter = () => (\\n  <CatalogTile\\n    id=\\\"simple-footer\\\"\\n    iconImg={pfLogo2}\\n    iconAlt=\\\"PatternFly logo\\\"\\n    badges={[\\n      <CatalogTileBadge title=\\\"Certified\\\">\\n        <CogIcon />\\n      </CatalogTileBadge>\\n    ]}\\n    title=\\\"Patternfly-React\\\"\\n    vendor=\\\"provided by Red Hat\\\"\\n    description={\\n      'This is a very, very long description that should be truncated after one line. ' +\\n      'Three lines is the default for cards without a footer. Cards with a footer are truncated after one line. Truncation function use is deprecated; please pass in a maxDescriptionLength of -1 to override it. ' +\\n      'This has changed from PatternFly 3.'\\n    }\\n    footer={\\n      <span>\\n        <OutlinedCheckCircleIcon style={{color: 'var(--pf-v5-global--success-color--100)'}} /> Enabled\\n      </span>\\n    }\\n  />\\n)\",\"title\":\"Basic with footer\",\"lang\":\"js": {
      "React": 4
    },
    "react';\\nimport { CatalogTile, CatalogTileBadge } from '@patternfly/react-catalog-view-extension';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport pfLogo2 from './pfLogo2.svg';\\n\\nconst LinkVariant = () => (\\n  <CatalogTile\\n    id=\\\"simple-link-variant\\\"\\n    iconImg={pfLogo2}\\n    iconAlt=\\\"PatternFly logo\\\"\\n    badges={[\\n      <CatalogTileBadge title=\\\"Certified\\\">\\n        <CogIcon />\\n      </CatalogTileBadge>\\n    ]}\\n    href=\\\"http://patternfly.org/v4\\\"\\n    title=\\\"Patternfly-React\\\"\\n    vendor=\\\"provided by Red Hat\\\"\\n    description={\\n      'This is a very, very long description that should be truncated after three lines. ' +\\n      'Three lines is the default for cards without a footer. Cards with a footer are truncated after one line. Truncation function use is deprecated; please pass in a maxDescriptionLength of -1 to override it. ' +\\n      'This has changed from PatternFly 3.'\\n    }\\n  />\\n)\",\"title\":\"Link variant\",\"lang\":\"js": {
      "React": 4
    },
    "react';\\nimport { CatalogTile, CatalogTileBadge } from '@patternfly/react-catalog-view-extension';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport OutlinedCheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-check-circle-icon';\\nimport pfLogo2 from './pfLogo2.svg';\\n\\nconst WithMultipleIconBadges = () => (\\n  <CatalogTile\\n    id=\\\"multiIcon\\\"\\n    iconImg={pfLogo2}\\n    iconAlt=\\\"PatternFly logo\\\"\\n    badges={[\\n      <CatalogTileBadge title=\\\"Certified\\\">\\n        <CogIcon />\\n      </CatalogTileBadge>,\\n      <CatalogTileBadge title=\\\"USDA Approved\\\">\\n        <OutlinedCheckCircleIcon style={{color: 'var(--pf-v5-global--success-color--100)'}} />\\n      </CatalogTileBadge>\\n    ]}\\n    title=\\\"Patternfly-React\\\"\\n    vendor=\\\"provided by Red Hat\\\"\\n    description={\\n      'This is a very, very long description that should be truncated after three lines. ' +\\n      'Three lines is the default for cards without a footer. Cards with a footer are truncated after one line. Truncation function use is deprecated; please pass in a maxDescriptionLength of -1 to override it. ' +\\n      'This has changed from PatternFly 3.'\\n    }\\n  />\\n)\",\"title\":\"With multiple icon badges\",\"lang\":\"js": {
      "React": 4
    },
    "react';\\nimport { CatalogTile } from '@patternfly/react-catalog-view-extension';\\nimport pfLogo2 from './pfLogo2.svg';\\n\\nconst WithTextBadge = () => (\\n  <CatalogTile\\n    id=\\\"text-badge\\\"\\n    iconImg={pfLogo2}\\n    iconAlt=\\\"PatternFly logo\\\"\\n    badges={[\\n      'Community'\\n    ]}\\n    title=\\\"Patternfly-React\\\"\\n    vendor=\\\"provided by Red Hat\\\"\\n    description={\\n      'This is a very, very long description that should be truncated after three lines. ' +\\n      'Three lines is the default for cards without a footer. Cards with a footer are truncated after one line. Truncation function use is deprecated; please pass in a maxDescriptionLength of -1 to override it. ' +\\n      'This has changed from PatternFly 3.'\\n    }\\n  />\\n)\",\"title\":\"With text badge\",\"lang\":\"js": {
      "React": 4
    },
    "react';\\nimport { CatalogTile, CatalogTileBadge } from '@patternfly/react-catalog-view-extension';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport pfLogo2 from './pfLogo2.svg';\\n\\nconst WithChildrenInsteadOfDescription = () => (\\n  <CatalogTile\\n    id=\\\"simple-with-children\\\"\\n    featured\\n    iconImg={pfLogo2}\\n    iconAlt=\\\"PatternFly logo\\\"\\n    badges={[\\n      <CatalogTileBadge title=\\\"Certified\\\">\\n        <CogIcon />\\n      </CatalogTileBadge>\\n    ]}\\n    title=\\\"Patternfly-React\\\"\\n    vendor=\\\"provided by Red Hat\\\"\\n  >\\n    This is a very, very long stetch of child text that should be not be truncated\\n    and illustrates how Flyers can add longer content to PatternFly 4 catalog tiles\\n    using the children prop. Cards usually truncate descriptions at three lines.\\n    Cards with a footer are truncated after one line. This has changed from PatternFly 3.\\n    Children can be of any length.\\n  </CatalogTile>\\n)\",\"title\":\"With children instead of description\",\"lang\":\"js": {
      "React": 4
    },
    "@patternfly/react-icons/dist/esm/icons/star-icon": {
      "StarIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/cc-paypal-icon": {
      "CcPaypalIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/cc-amex-icon": {
      "CcAmexIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/cc-discover-icon": {
      "CcDiscoverIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/cc-visa-icon": {
      "CcVisaIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/cc-mastercard-icon": {
      "CcMastercardIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/cc-diners-club-icon": {
      "CcDinersClubIcon": 2
    },
    "react';\\nimport { FilterSidePanel, FilterSidePanelCategory, FilterSidePanelCategoryItem } from '@patternfly/react-catalog-view-extension';\\nimport StarIcon from '@patternfly/react-icons/dist/esm/icons/star-icon';\\nimport CcPaypalIcon from '@patternfly/react-icons/dist/esm/icons/cc-paypal-icon';\\nimport CcAmexIcon from '@patternfly/react-icons/dist/esm/icons/cc-amex-icon';\\nimport CcDiscoverIcon from '@patternfly/react-icons/dist/esm/icons/cc-discover-icon';\\nimport CcVisaIcon from '@patternfly/react-icons/dist/esm/icons/cc-visa-icon';\\nimport CcMastercardIcon from '@patternfly/react-icons/dist/esm/icons/cc-mastercard-icon';\\nimport CcDinersClubIcon from '@patternfly/react-icons/dist/esm/icons/cc-diners-club-icon';\\nimport { TextInput } from '@patternfly/react-core';\\n\\nclass MockFilterSidePanelExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      activeFilters: {\\n        typeSUV: false,\\n        typeSedan: false,\\n        typePickup: false,\\n        typeSports: false,\\n        makeChevy: false,\\n        makeFord: false,\\n        makeDodge: false,\\n        makeVolkswagen: false,\\n        makeHyundai: false,\\n        makeHonda: false,\\n        makeToyota: false,\\n        makeMercedes: false,\\n        makeBMW: false,\\n        makeInfiniti: false,\\n        makeLexus: false,\\n        makeAcura: false,\\n        paymentPaypal: false,\\n        paymentDiscover: false,\\n        paymentVisa: false,\\n        paymentMastercard: false,\\n        paymentAmex: false,\\n        paymentDinersClub: false,\\n        mileage50: false,\\n        mileage40: false,\\n        mileage30: false,\\n        mileage20: false,\\n        mileage10: false,\\n        rating5: false,\\n        rating4: false,\\n        rating3: false,\\n        rating2: false,\\n        rating1: false\\n      },\\n      showAllCategories: {\\n        type: false,\\n        make: false,\\n        paymentOptions: false,\\n        mileage: false,\\n        rating: false\\n      }\\n    };\\n    \\n    this.onShowAllToggle = id => {\\n      const showAllCategories = { ...this.state.showAllCategories };\\n      showAllCategories[id] = !showAllCategories[id];\\n      this.setState({ showAllCategories });\\n    };\\n  \\n    this.onFilterChange = (id, value) => {\\n      const activeFilters = { ...this.state.activeFilters };\\n      activeFilters[id] = value;\\n      this.setState({ activeFilters });\\n    };\\n  \\n    this.getStars = count => {\\n      const stars = [];\\n  \\n      for (let i = 0; i < count; i++) {\\n        stars.push(<StarIcon key={i} />);\\n      }\\n  \\n      return (\\n        <span>\\n          <span className=\\\"pf-v5-u-screen-reader\\\">{`${count} stars`}</span>\\n          {stars}\\n        </span>\\n      );\\n    };\\n  }\\n  \\n  render() {\\n    const { activeFilters, showAllCategories } = this.state;\\n    const maxShowCount = 5;\\n    const leeway = 2;\\n    return (\\n     <div style={{ width: '205px', border: '1px solid grey', paddingTop: '20px' }}>   \\n      <FilterSidePanel id=\\\"filter-panel\\\">\\n        <FilterSidePanelCategory key=\\\"cat1\\\"> \\n          <TextInput type=\\\"text\\\" id=\\\"filter-text-input\\\" placeholder=\\\"Filter by name\\\" aria-label=\\\"filter text input\\\" />\\n        </FilterSidePanelCategory>\\n        <FilterSidePanelCategory\\n          key=\\\"cat2\\\"\\n          title=\\\"Type\\\"\\n          maxShowCount={maxShowCount}\\n          leeway={leeway}\\n          showAll={showAllCategories.type}\\n          onShowAllToggle={() => this.onShowAllToggle('type')}\\n        >\\n          <FilterSidePanelCategoryItem\\n            key=\\\"suv\\\"\\n            count={23}\\n            checked={activeFilters.typeSUV}\\n            onClick={e => this.onFilterChange('typeSUV', e.target.checked)}\\n          >\\n            SUV\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"sedan\\\"\\n            count={11}\\n            checked={activeFilters.typeSedan}\\n            onClick={e => this.onFilterChange('typeSedan', e.target.checked)}\\n          >\\n            Sedan\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"pickup\\\"\\n            count={5}\\n            checked={activeFilters.typePickup}\\n            onClick={e => this.onFilterChange('typePickup', e.target.checked)}\\n          >\\n            Pickup Truck\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"sports\\\"\\n            count={3}\\n            checked={activeFilters.typeSports}\\n            onClick={e => this.onFilterChange('typeSports', e.target.checked)}\\n          >\\n            Sports Car\\n          </FilterSidePanelCategoryItem>\\n        </FilterSidePanelCategory>\\n        <FilterSidePanelCategory\\n          key=\\\"cat3\\\"\\n          title=\\\"Manufacturer\\\"\\n          maxShowCount={maxShowCount}\\n          leeway={leeway}\\n          showAll={showAllCategories.manufacturer}\\n          onShowAllToggle={() => this.onShowAllToggle('manufacturer')}\\n        >\\n          <FilterSidePanelCategoryItem\\n            key=\\\"chevy\\\"\\n            count={6}\\n            checked={activeFilters.makeChevy}\\n            onClick={e => this.onFilterChange('makeChevy', e.target.checked)}\\n          >\\n            Chevrolet\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"ford\\\"\\n            count={5}\\n            checked={activeFilters.makeFord}\\n            onClick={e => this.onFilterChange('makeFord', e.target.checked)}\\n          >\\n            Ford\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"dodge\\\"\\n            count={7}\\n            checked={activeFilters.makeDodge}\\n            onClick={e => this.onFilterChange('makeDodge', e.target.checked)}\\n          >\\n            Dodge\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"volks\\\"\\n            count={4}\\n            checked={activeFilters.makeVolkswagen}\\n            onClick={e => this.onFilterChange('makeVolkswagen', e.target.checked)}\\n          >\\n            Volkswagen\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"hyundai\\\"\\n            count={2}\\n            checked={activeFilters.makeHyundai}\\n            onClick={e => this.onFilterChange('makeHyundai', e.target.checked)}\\n          >\\n            Hyundai\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"honda\\\"\\n            count={3}\\n            checked={activeFilters.makeHonda}\\n            onClick={e => this.onFilterChange('makeHonda', e.target.checked)}\\n          >\\n            Honda\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"toyota\\\"\\n            count={6}\\n            checked={activeFilters.makeToyota}\\n            onClick={e => this.onFilterChange('makeToyota', e.target.checked)}\\n          >\\n            Toyota\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"mercedes\\\"\\n            count={2}\\n            checked={activeFilters.makeMercedes}\\n            onClick={e => this.onFilterChange('makeMercedes', e.target.checked)}\\n          >\\n            Mercedes\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"bmw\\\"\\n            count={2}\\n            checked={activeFilters.makeBMW}\\n            onClick={e => this.onFilterChange('makeBMW', e.target.checked)}\\n          >\\n            BMW\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"infiniti\\\"\\n            count={1}\\n            checked={activeFilters.makeInfiniti}\\n            onClick={e => this.onFilterChange('makeInfiniti', e.target.checked)}\\n          >\\n            Infiniti\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"lexus\\\"\\n            count={1}\\n            checked={activeFilters.makeLexus}\\n            onClick={e => this.onFilterChange('makeLexus', e.target.checked)}\\n          >\\n            Lexus\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"acura\\\"\\n            count={0}\\n            checked={activeFilters.makeAcura}\\n            onClick={e => this.onFilterChange('makeAcura', e.target.checked)}\\n          >\\n            Acura\\n          </FilterSidePanelCategoryItem>\\n        </FilterSidePanelCategory>\\n        <FilterSidePanelCategory\\n          key=\\\"cat4\\\"\\n          title=\\\"Payment Options\\\"\\n          maxShowCount={maxShowCount}\\n          leeway={leeway}\\n          showAll={showAllCategories.payment}\\n          onShowAllToggle={() => this.onShowAllToggle('payment')}\\n        >\\n          <FilterSidePanelCategoryItem\\n            key=\\\"pp\\\"\\n            icon={<CcPaypalIcon />}\\n            checked={activeFilters.paymentPaypal}\\n            onClick={e => this.onFilterChange('paymentPaypal', e.target.checked)}\\n          >\\n            PayPal\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"discover\\\"\\n            icon={<CcDiscoverIcon />}\\n            checked={activeFilters.paymentDiscover}\\n            onClick={e => this.onFilterChange('paymentDiscover', e.target.checked)}\\n          >\\n            Discover\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"visa\\\"\\n            icon={<CcVisaIcon />}\\n            checked={activeFilters.paymentVisa}\\n            onClick={e => this.onFilterChange('paymentVisa', e.target.checked)}\\n          >\\n            Visa\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"mc\\\"\\n            icon={<CcMastercardIcon />}\\n            checked={activeFilters.paymentMastercard}\\n            onClick={e => this.onFilterChange('paymentMastercard', e.target.checked)}\\n          >\\n            Mastercard\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"amex\\\"\\n            icon={<CcAmexIcon />}\\n            checked={activeFilters.paymentAmex}\\n            onClick={e => this.onFilterChange('paymentAmex', e.target.checked)}\\n          >\\n            American Express\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"dc\\\"\\n            icon={<CcDinersClubIcon />}\\n            checked={activeFilters.paymentDinersClub}\\n            onClick={e => this.onFilterChange('paymentDinersClub', e.target.checked)}\\n          >\\n            {\\\"Diner's Club\\\"}\\n          </FilterSidePanelCategoryItem>\\n        </FilterSidePanelCategory>\\n        <FilterSidePanelCategory\\n          key=\\\"cat5\\\"\\n          title=\\\"Fuel Mileage\\\"\\n          maxShowCount={maxShowCount}\\n          leeway={leeway}\\n          showAll={showAllCategories.mileage}\\n          onShowAllToggle={() => this.onShowAllToggle('mileage')}\\n        >\\n          <FilterSidePanelCategoryItem\\n            key=\\\"gt50\\\"\\n            count={3}\\n            checked={activeFilters.mileage50}\\n            onClick={e => this.onFilterChange('mileage50', e.target.checked)}\\n          >\\n            50+\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"4050\\\"\\n            count={7}\\n            checked={activeFilters.mileage40}\\n            onClick={e => this.onFilterChange('mileage40', e.target.checked)}\\n          >\\n            40-50\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"3040\\\"\\n            count={9}\\n            checked={activeFilters.mileage30}\\n            onClick={e => this.onFilterChange('mileage30', e.target.checked)}\\n          >\\n            30-40\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"2030\\\"\\n            count={12}\\n            checked={activeFilters.mileage20}\\n            onClick={e => this.onFilterChange('mileage20', e.target.checked)}\\n          >\\n            20-30\\n          </FilterSidePanelCategoryItem>\\n          <FilterSidePanelCategoryItem\\n            key=\\\"gt20\\\"\\n            count={8}\\n            checked={activeFilters.mileage10}\\n            onClick={e => this.onFilterChange('mileage10', e.target.checked)}\\n          >\\n            {'< 20'}\\n          </FilterSidePanelCategoryItem>\\n        </FilterSidePanelCategory>\\n        <FilterSidePanelCategory\\n          key=\\\"cat6\\\"\\n          title=\\\"Rating\\\"\\n          maxShowCount={maxShowCount}\\n          leeway={leeway}\\n          showAll={showAllCategories.rating}\\n          onShowAllToggle={() => this.onShowAllToggle('rating')}\\n        >\\n          <FilterSidePanelCategoryItem\\n            key=\\\"5star\\\"\\n            count={2}\\n            icon={this.getStars(5)}\\n            checked={activeFilters.rating5}\\n            onClick={e => this.onFilterChange('rating5', e.target.checked)}\\n          />\\n          <FilterSidePanelCategoryItem\\n            key=\\\"4star\\\"\\n            count={12}\\n            icon={this.getStars(4)}\\n            checked={activeFilters.rating4}\\n            onClick={e => this.onFilterChange('rating4', e.target.checked)}\\n          />\\n          <FilterSidePanelCategoryItem\\n            key=\\\"3star\\\"\\n            count={8}\\n            icon={this.getStars(3)}\\n            checked={activeFilters.rating3}\\n            onClick={e => this.onFilterChange('rating3', e.target.checked)}\\n          />\\n          <FilterSidePanelCategoryItem\\n            key=\\\"2star\\\"\\n            count={5}\\n            icon={this.getStars(2)}\\n            checked={activeFilters.rating2}\\n            onClick={e => this.onFilterChange('rating2', e.target.checked)}\\n          />\\n          <FilterSidePanelCategoryItem\\n            key=\\\"1star\\\"\\n            count={3}\\n            icon={this.getStars(1)}\\n            checked={activeFilters.rating1}\\n            onClick={e => this.onFilterChange('rating1', e.target.checked)}\\n          />\\n        </FilterSidePanelCategory>\\n      </FilterSidePanel>\\n    </div>\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js": {
      "React": 2
    },
    "@patternfly/react-icons/dist/esm/icons/ok-icon": {
      "OkIcon": 3
    },
    "@patternfly/react-icons/dist/esm/icons/external-link-alt-icon": {
      "ExternalLinkAltIcon": 4
    },
    "@patternfly/react-icons/dist/esm/icons/globe-icon": {
      "GlobeIcon": 3
    },
    "react';\\nimport { PropertiesSidePanel, PropertyItem } from '@patternfly/react-catalog-view-extension';\\nimport OkIcon from '@patternfly/react-icons/dist/esm/icons/ok-icon';\\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\\nimport GlobeIcon from '@patternfly/react-icons/dist/esm/icons/globe-icon';\\n\\nconst PropertiesSidePanelWithPropertyItems = () => (\\n  <div style={{ display: 'inline-block', padding: '15px', border: '1px solid grey' }}>\\n    <PropertiesSidePanel>\\n      <PropertyItem label=\\\"Operator Version\\\" value=\\\"0.9.8 (latest)\\\" />\\n      <PropertyItem\\n        label=\\\"Certified Level\\\"\\n        value={\\n          <span>\\n            <OkIcon style={{color: 'var(--pf-v5-global--success-color--100)'}} /> Certified\\n          </span>\\n        }\\n      />\\n      <PropertyItem label=\\\"Provider\\\" value=\\\"Red Hat, Inc\\\" />\\n      <PropertyItem label=\\\"Health Index\\\" value=\\\"A\\\" />\\n      <PropertyItem\\n        label=\\\"Repository\\\"\\n        value={\\n          <a href=\\\"https://quay.io/repository/redhat/prometheus-operator\\\">\\n            https://quay.io/repository/redhat/prometheus-operator\\n          </a>\\n        }\\n      />\\n      <PropertyItem\\n        label=\\\"Container Image\\\"\\n        value={\\n          <a href=\\\"#\\\">\\n            0.22.2 <ExternalLinkAltIcon />\\n          </a>\\n        }\\n      />\\n      <PropertyItem\\n        label=\\\"Created At\\\"\\n        value={\\n          <span>\\n            <GlobeIcon /> Aug 23, 1:58pm\\n          </span>\\n        }\\n      />\\n      <PropertyItem label=\\\"Support\\\" value={<a href=\\\"#\\\">Red Hat</a>} />\\n    </PropertiesSidePanel>\\n  </div>\\n)\",\"title\":\"Properties side panel with property items\",\"lang\":\"js": {
      "React": 2
    },
    "react';\\nimport { VerticalTabs, VerticalTabsTab } from '@patternfly/react-catalog-view-extension';\\n\\nclass MockVerticalTabsExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { activeTabId: 'all' };\\n    this.onActivateTab = id => {\\n      this.setState({ activeTabId: id });\\n    };\\n  }\\n\\n  render() {\\n    const { restrictTabs, wrapStyle } = this.props;\\n    const { activeTabId } = this.state;\\n\\n    const topLevelIds = ['all', 'one', 'two', 'three', 'four', 'five', 'six', 'seven'];\\n\\n    const renderTab = (id, title, children, props) => {\\n      const childIds = React.Children.map(children, child => child.props.id);\\n\\n      return (\\n        <VerticalTabsTab\\n          id={id}\\n          key={id}\\n          title={title}\\n          wrapStyle={wrapStyle}\\n          onActivate={() => this.onActivateTab(id)}\\n          active={activeTabId === id}\\n          hasActiveDescendant={activeTabId.startsWith(id)}\\n          {...props}\\n        >\\n          {children && (\\n            <VerticalTabs restrictTabs={restrictTabs} activeTab={childIds.includes(activeTabId)}>\\n              {children}\\n            </VerticalTabs>\\n          )}\\n        </VerticalTabsTab>\\n      );\\n    };\\n\\n    return (\\n      <VerticalTabs id=\\\"vertical-tabs\\\" restrictTabs={restrictTabs} activeTab={topLevelIds.includes(activeTabId)}>\\n        {renderTab('all', 'All', null, { shown: true })}\\n        {renderTab('one', 'Tab One', [\\n          renderTab('one-one', 'Tab One-One', [\\n            renderTab('one-one-one', 'About Modal', null, {href: \\\"../components/about-modal\\\"}),\\n            renderTab('one-one-two', 'Accordion', null, {href: \\\"../components/accordion\\\"}),\\n            renderTab('one-one-three', 'Redhat', null, {href: \\\"http://www.redhat.com\\\"})\\n          ]),\\n          renderTab('one-two', 'Tab One-Two', [\\n            renderTab('one-two-one', 'Tab One-Two-One'),\\n            renderTab('one-two-two', 'Tab One-Two-Two'),\\n            renderTab('one-two-three', 'Tab One-Two-Three')\\n          ]),\\n          renderTab('one-three', 'Tab One-Thee')\\n        ])}\\n        {renderTab('two', 'Tab Two', [\\n          renderTab('two-one', 'Tab Two-One'),\\n          renderTab('two-two', 'Tab Two-Two'),\\n          renderTab('two-three', 'Tab Two-Three')\\n        ])}\\n        {renderTab('three', 'Tab Three - Donec id elit non mi porta gravida at eget metus')}\\n        {renderTab('four', 'Tab Four')}\\n        {renderTab('five', 'Tab Five')}\\n        {renderTab('six', 'Tab Six')}\\n        {renderTab('seven', 'Tab Seven')}\\n      </VerticalTabs>\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js": {
      "React": 2
    },
    "react';\\nimport { CatalogItemHeader } from '@patternfly/react-catalog-view-extension';\\nimport pfLogo2 from './examples/pfLogo2.svg';\\n\\nconst WithVendorDescription = () => (\\n  <CatalogItemHeader\\n    iconImg={pfLogo2}\\n    title=\\\"Patternfly-React\\\"\\n    vendor={\\n      <span>\\n        provided by <a style={{ textDecoration: 'underline' }}href=\\\"http://redhat.com\\\">Red Hat</a>\\n      </span>\\n    }\\n  />\\n)\",\"title\":\"With vendor description\",\"lang\":\"js": {
      "React": 1
    },
    "@patternfly/react-styles/css/components/Form/form": {
      "formStyles": 1
    },
    "@patternfly/quickstarts": {
      "LoadingBox": 7,
      "QuickStart": 14,
      "QuickStartContextProvider": 1,
      "QuickStartContextValues": 2,
      "QuickStartDrawer": 2,
      "useLocalStorage": 5,
      "HelpTopicContainerProps": 1,
      "HelpTopicContainer": 2,
      "QuickStartContainer": 3,
      "QuickStartContainerProps": 2,
      "setQueryArgument": 1,
      "removeQueryArgument": 1,
      "QUICKSTART_ID_FILTER_KEY": 1,
      "QuickStartContext": 4,
      "QuickStartCatalog": 1,
      "QuickStartCatalogEmptyState": 1,
      "QuickStartCatalogFilterCountWrapper": 1,
      "QuickStartCatalogFilterSearchWrapper": 1,
      "QuickStartCatalogFilterStatusWrapper": 1,
      "QuickStartCatalogHeader": 1,
      "QuickStartCatalogSection": 1,
      "QuickStartCatalogToolbar": 1,
      "QuickStartTile": 1,
      "clearFilterParams": 1,
      "filterQuickStarts": 1,
      "getQuickStartStatus": 1,
      "QuickStartCatalogPage": 3,
      "HelpTopicContext": 2,
      "HelpTopicContextValues": 1,
      "ProcedureAsciiDocParser": 1,
      "useValuesForQuickStartContext": 1
    },
    "@patternfly/react-icons/dist/js/icons/lightbulb-icon": {
      "LightbulbIcon": 3
    },
    "@patternfly/react-icons/dist/js/icons/help-icon": {
      "HelpIcon": 1
    },
    "@patternfly/quickstarts/dist/utils/help-topic-types": {
      "HelpTopic": 1
    },
    "@patternfly/react-icons/dist/js/icons/github-icon": {
      "GithubIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/rocket-icon": {
      "RocketIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/info-circle-icon": {
      "InfoCircleIcon": 2
    },
    "@patternfly/react-icons/dist/js/icons/external-link-alt-icon": {
      "ExternalLinkAltIcon": 2
    },
    "@patternfly/react-icons/dist/js/icons/outlined-clock-icon": {
      "OutlinedClockIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/fire-icon": {
      "FireIcon": 2
    },
    "@patternfly/react-icons/dist/js/icons/copy-icon": {
      "CopyIcon": 2
    },
    "@patternfly/react-icons/dist/js/icons/check-circle-icon": {
      "CheckCircleIcon": 2
    },
    "@patternfly/react-icons/dist/js/icons/exclamation-circle-icon": {
      "ExclamationCircleIcon": 2
    },
    "@patternfly/react-tokens/dist/esm/global_danger_color_100": {
      "dangerColor": 1
    },
    "@patternfly/react-tokens/dist/esm/global_palette_blue_300": {
      "blueInfoColor": 1
    },
    "@patternfly/react-tokens/dist/esm/global_palette_green_500": {
      "okColor": 1
    },
    "@patternfly/react-icons/dist/js/icons/sync-alt-icon": {
      "SyncAltIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/arrow-right-icon": {
      "ArrowRightIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/bars-icon": {
      "BarsIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/search-icon": {
      "SearchIcon": 1
    },
    "@patternfly/react-console": {
      "SerialConsole": 2,
      "AccessConsoles": 1,
      "VncConsole": 1,
      "DesktopViewer": 1
    },
    "react';\\nimport { AccessConsoles, SerialConsole, VncConsole, DesktopViewer } from '@patternfly/react-console';\\nimport { SerialConsoleCustom } from './SerialConsoleCustom.jsx';\\nimport { debounce } from '@patternfly/react-core';\\n\\nAccessConsolesVariants = () => {\\n  const [status, setStatus] = React.useState('disconnected');\\n  const setConnected = React.useRef(debounce(() => setStatus('connected'), 3000)).current;\\n  const onConnect = React.useCallback(() => {\\n    setStatus('loading');\\n    setConnected();\\n  }, [setConnected])\\n  const onDisconnect = React.useCallback(() => setStatus('disconnected'), [])\\n  const ref = React.createRef();\\n\\n  return (\\n    <AccessConsoles preselectedType=\\\"SerialConsole\\\">\\n      <VncConsole host=\\\"localhost\\\" port=\\\"9090\\\" encrypt shared />\\n      <SerialConsole\\n        onConnect={onConnect}\\n        status={status}\\n        onDisconnect={onDisconnect}\\n        onData={data => {\\n          ref.current.onDataReceived(data);\\n        }}\\n        ref={ref}\\n      />\\n      <SerialConsoleCustom type='Serial Console pty2' />\\n      <DesktopViewer spice={{ address: '127.0.0.1', port: '5900' }} vnc={{ address: '127.0.0.1', port: '5901' }} />\\n    </AccessConsoles>\\n  );\\n};\",\"title\":\"Basic Usage\",\"lang\":\"js\",\"isFullscreen": {
      "React": 1
    },
    "@patternfly/react-styles/css/components/Consoles/AccessConsoles": {
      "styles": 1
    },
    "@patternfly/react-styles/css/components/Consoles/DesktopViewer": {
      "styles": 1
    },
    "@patternfly/react-styles/css/components/Consoles/SerialConsole": {
      "styles": 2
    },
    "@patternfly/react-styles/css/components/Consoles/VncConsole": {
      "styles": 2
    },
    "@patternfly/react-user-feedback": {
      "FeedbackModal": 7
    },
    "@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg": {
      "feedbackImage": 4
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\n\\nexport const BasicExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback='https://console.redhat.com/self-managed-feedback-form' \\n        onJoinMailingList='https://console.redhat.com/self-managed-research-form'\\n        onOpenSupportCase='http://www.redhat.com'\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Basic\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\nimport feedbackImage from '@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback={()=>\\n            // Example of a successful callback\\n             true\\n        }\\n        onJoinMailingList={()=>\\n            // Example of am unsuccessful callback\\n             false\\n        }\\n        onOpenSupportCase='http://www.redhat.com'\\n        feedbackImg={feedbackImage}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Advanced\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        feedbackLocale={i18nExample}\\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback={()=>\\n            // Example of a successful callback\\n             true\\n        }\\n        onJoinMailingList={()=>\\n             true\\n        }\\n        onOpenSupportCase='http://www.redhat.com'\\n        onReportABug={()=>true}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"i18n\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\n\\nexport const URLExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        onShareFeedback='https://pf-user-feedback-extension-form-demos.surge.sh/submitFeedback.html' \\n        onJoinMailingList='https://pf-user-feedback-extension-form-demos.surge.sh/joinMailingList.html'\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug='https://pf-user-feedback-extension-form-demos.surge.sh/reportBug.html'\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Basic modal\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\nimport feedbackImage from '@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        onShareFeedback={(email:string, feedback:string)=>{\\n            // Example of a successful callback\\n            console.log (`Email Address: ${email} Feedback: ${feedback}`);\\n            return true\\n        }}\\n        onJoinMailingList={(email:string)=>{\\n            // Example of am unsuccessful callback\\n            console.log (`Email Address: ${email}`);\\n            return false;\\n        }}\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={(email:string, bug:string)=>{\\n            console.log (`Email Address: ${email} Bug: ${bug}`)\\n            return true;}}\\n        feedbackImg={feedbackImage}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Advanced modal\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\nimport feedbackImage from '@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg';\\n\\nexport const AdvancedStaticEmailExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        email='test.user@patternfly.org'\\n        onShareFeedback={(email:string, feedback:string)=>{\\n            // Example of a successful callback\\n            console.log (`Email Address: ${email} Feedback: ${feedback}`);\\n            return true\\n        }}\\n        onJoinMailingList={(email:string)=>{\\n            // Example of am unsuccessful callback\\n            console.log (`Email Address: ${email}`);\\n            return false;\\n        }}\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={(email:string, bug:string)=>{\\n            console.log (`Email Address: ${email} Bug: ${bug}`)\\n            return true;}}\\n        feedbackImg={feedbackImage}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Advanced that autofills an email address\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\nexport const AsyncExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n\\n   const fakeNetworkCall = (email:string, feedback:string, bug:string) => new Promise<boolean>(resolve => {\\n      setTimeout(() => {\\n        console.log(`Email Address: ${email} Feedback: ${feedback} Bug: ${bug}`);\\n        console.log('Network call complete successfully so return true');\\n        resolve(true);\\n      }, 2000);\\n    })\\n  \\n   const simulatedAsyncCall = async (email='', feedback='', bug='') => {\\n        console.log('simulatedAsyncCall');\\n        const result = await fakeNetworkCall(email, feedback, bug);\\n        return result;\\n      }\\n      \\n\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        onShareFeedback={(email:string, feedback:string)=>simulatedAsyncCall(email, feedback)}\\n        onJoinMailingList={(email:string)=>simulatedAsyncCall(email)}\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={(email:string, bug:string)=>simulatedAsyncCall(email, '', bug)}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Modal with asynchronous call support\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        feedbackLocale={i18nExample}\\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback={()=>\\n            // Example of a successful callback\\n             true\\n        }\\n        onJoinMailingList={()=>\\n             true\\n        }\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={()=>true}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Modal with internationalization support\",\"lang\":\"js": {
      "React": 1
    },
    "@patternfly/react-icons/dist/esm/icons/error-circle-o-icon": {
      "ErrorIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/check-icon": {
      "CheckIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/bars-icon": {
      "BarsIcon": 1
    },
    "@patternfly/react-topology": {
      "GraphElement": 27,
      "ComponentFactory": 27,
      "withContextMenu": 5,
      "ContextMenuSeparator": 5,
      "ContextMenuItem": 5,
      "withDragNode": 14,
      "withSelection": 10,
      "ModelKind": 28,
      "DefaultNode": 16,
      "withPanZoom": 15,
      "GraphComponent": 25,
      "ContextSubMenuItem": 1,
      "withDndDrop": 6,
      "nodeDropTargetSpec": 4,
      "nodeDragSourceSpec": 4,
      "GraphElementProps": 2,
      "WithCreateConnectorProps": 6,
      "Dimensions": 1,
      "WithContextMenuProps": 11,
      "WithDragNodeProps": 16,
      "WithSelectionProps": 18,
      "WithDndDragProps": 8,
      "WithDndDropProps": 9,
      "ShapeProps": 7,
      "useAnchor": 5,
      "EllipseAnchor": 1,
      "RectAnchor": 3,
      "Edge": 9,
      "EdgeConnectorArrow": 1,
      "EdgeTerminalType": 5,
      "Layer": 9,
      "Point": 3,
      "useBendpoint": 1,
      "WithRemoveConnectorProps": 1,
      "WithSourceDragProps": 1,
      "WithTargetDragProps": 1,
      "useCombineRefs": 6,
      "Node": 26,
      "Rect": 1,
      "useHover": 4,
      "getShapeComponent": 1,
      "DEFAULT_LAYER": 3,
      "FinallyNode": 2,
      "ScaleDetailsLevel": 4,
      "TOP_LAYER": 4,
      "useDetailsLevel": 2,
      "TaskEdge": 3,
      "DEFAULT_WHEN_OFFSET": 3,
      "TaskNode": 2,
      "WhenDecorator": 2,
      "integralShapePath": 2,
      "PointTuple": 2,
      "NodeStyle": 1,
      "NodeShape": 20,
      "maxPadding": 1,
      "hullPath": 1,
      "vecSum": 1,
      "vecScale": 1,
      "unitNormal": 1,
      "useSvgAnchor": 5,
      "SpacerNode": 2,
      "DefaultTaskGroup": 2,
      "DEFAULT_TASK_NODE_TYPE": 3,
      "DEFAULT_SPACER_NODE_TYPE": 3,
      "DEFAULT_EDGE_TYPE": 3,
      "DEFAULT_FINALLY_NODE_TYPE": 4,
      "usePolygonAnchor": 1,
      "AnchorEnd": 6,
      "Rectangle": 1,
      "useSize": 1,
      "DefaultEdge": 13,
      "DefaultGroup": 12,
      "observer": 4,
      "Decorator": 1,
      "DEFAULT_DECORATOR_RADIUS": 1,
      "getDefaultShapeDecoratorCenter": 1,
      "NodeStatus": 11,
      "TopologyQuadrant": 1,
      "DragObjectWithType": 4,
      "withCreateConnector": 2,
      "Graph": 18,
      "isNode": 4,
      "withTargetDrag": 3,
      "withSourceDrag": 2,
      "groupDropTargetSpec": 2,
      "graphDropTargetSpec": 2,
      "NODE_DRAG_TYPE": 1,
      "CREATE_CONNECTOR_DROP_TYPE": 3,
      "ElementContext": 2,
      "AbstractAnchor": 2,
      "EdgeAnimationSpeed": 3,
      "EdgeModel": 7,
      "EdgeStyle": 13,
      "Model": 26,
      "NodeModel": 17,
      "useComponentFactory": 10,
      "useModel": 10,
      "TopologyView": 10,
      "TopologyControlBar": 5,
      "createTopologyControlButtons": 5,
      "defaultControlButtonsOptions": 5,
      "Visualization": 18,
      "VisualizationSurface": 19,
      "SELECTION_EVENT": 15,
      "SelectionEventListener": 5,
      "createAggregateEdges": 1,
      "VisualizationProvider": 19,
      "useEventListener": 5,
      "DragEvent": 1,
      "ConnectorChoice": 1,
      "isGraph": 1,
      "useVisualizationController": 7,
      "ContextMenu": 1,
      "withDndDrag": 1,
      "Modifiers": 1,
      "useLayoutFactory": 2,
      "Layout": 16,
      "PipelineDagreLayout": 2,
      "NODE_SEPARATION_HORIZONTAL": 2,
      "GRAPH_LAYOUT_END_EVENT": 3,
      "getSpacerNodes": 2,
      "getEdgesFromNodes": 2,
      "useVisualizationState": 1,
      "SELECTION_STATE": 1,
      "DagreLayout": 3,
      "LayoutFactory": 14,
      "BadgeLocation": 2,
      "LabelPosition": 3,
      "Controller": 2,
      "EventListener": 1,
      "GRAPH_POSITION_CHANGE_EVENT": 1,
      "TopologySideBar": 2,
      "ForceLayout": 2,
      "ColaLayout": 13,
      "ConcentricLayout": 2,
      "GridLayout": 2,
      "BreadthFirstLayout": 2,
      "DEFAULT_WHEN_SIZE": 1,
      "PipelineNodeModel": 2,
      "RunStatus": 2,
      "WhenStatus": 1,
      "action": 2,
      "ColaGroupsLayout": 1
    },
    "@patternfly/react-topology/src/css/topology-components": {
      "styles": 2
    },
    "@patternfly/react-topology/dist/esm/css/topology-components": {
      "styles": 1
    },
    "@patternfly/react-icons/dist/esm/icons/check-circle-icon": {
      "CheckCircleIcon": 3
    },
    "@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon": {
      "ExclamationCircleIcon": 3
    },
    "@patternfly/react-icons/dist/esm/icons/regions-icon": {
      "AlternateIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/builder-image-icon": {
      "DefaultIcon": 2
    },
    "@patternfly/react-topology/dist/esm/hooks/useDetailsLevel": {
      "useDetailsLevel": 2
    },
    "@patternfly/react-icons/dist/esm/icons/folder-open-icon": {
      "FolderOpenIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/blueprint-icon": {
      "BlueprintIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/pause-circle-icon": {
      "PauseCircle": 1
    },
    "@patternfly/react-icons/dist/esm/icons/thumbtack-icon": {
      "Thumbtack": 1
    },
    "@patternfly/react-icons/dist/esm/createIcon": {
      "SVGIconProps": 2
    },
    "@patternfly/react-topology/dist/esm/anchors/AbstractAnchor": {
      "AbstractAnchor": 1
    },
    "@patternfly/react-topology/dist/esm/geom/Point": {
      "Point": 1
    },
    "@patternfly/react-icons/dist/esm/icons/skull-icon": {
      "SignOutAltIcon": 1
    },
    "@patternfly/react-topology/dist/esm/layouts/ColaGroupsLayout": {
      "ColaGroupsLayout": 1
    },
    "@patternfly/react-icons/dist/esm/icons/cube-icon": {
      "CubeIcon": 1
    },
    "@patternfly/react-styles/css/components/Dropdown/dropdown": {
      "styles": 1
    },
    "@patternfly/react-icons/dist/esm/icons/angle-right-icon": {
      "AngleRightIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/add-circle-o-icon": {
      "AddCircleOIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/trash-icon": {
      "TrashIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/expand-alt-icon": {
      "ExpandIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/compress-alt-icon": {
      "CollapseIcon": 2
    },
    "@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon": {
      "ExclamationTriangleIcon": 2
    },
    "@patternfly/react-tokens/dist/js/global_palette_blue_50": {
      "global_palette_blue_50": 2
    },
    "@patternfly/react-tokens/dist/js/global_palette_blue_300": {
      "global_palette_blue_300": 4
    },
    "@patternfly/react-tokens/dist/js/global_palette_black_1000": {
      "global_palette_black_1000": 1
    },
    "@patternfly/react-icons/dist/esm/icons/expand-arrows-alt-icon": {
      "ExpandArrowsAltIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/search-plus-icon": {
      "SearchPlusIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/search-minus-icon": {
      "SearchMinusIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/times-icon": {
      "TimesIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/angle-double-right-icon": {
      "AngleDoubleRightIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/circle-icon": {
      "CircleIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/not-started-icon": {
      "NotStartedIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/hourglass-half-icon": {
      "HourglassHalfIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/sync-alt-icon": {
      "SyncAltIcon": 1
    },
    "@patternfly/react-icons/dist/esm/icons/in-progress-icon": {
      "InProgressIcon": 1
    }
  },
  "classes": {
    "pf-m-current": 8,
    "pf-m-link": 35,
    "pf-m-redhat-font": 2,
    "pf-m-expanded": 91,
    "pf-m-inline": 74,
    "pf-m-plain": 67,
    "pf-c-alert": 21,
    "pf-c-alert__action": 5,
    "pf-c-alert__action-group": 9,
    "pf-c-alert__description": 7,
    "pf-c-alert__icon": 3,
    "pf-c-alert__title": 7,
    "pf-c-alert__toggle": 3,
    "pf-c-alert__toggle-icon": 3,
    "pf-c-button": 232,
    "pf-m-success": 45,
    "pf-m-danger": 58,
    "pf-m-warning": 51,
    "pf-m-info": 17,
    "pf-m-expandable": 8,
    "pf-m-truncate": 3,
    "pf-m-overpass-font": 24,
    "pf-c-backdrop": 4,
    "pf-c-backdrop__open": 3,
    "pf-c-badge": 15,
    "pf-m-read": 3,
    "pf-m-unread": 3,
    "pf-c-button__icon": 5,
    "pf-c-button__progress": 5,
    "pf-m-active": 35,
    "pf-m-block": 5,
    "pf-m-small": 3,
    "pf-m-primary": 33,
    "pf-m-display-lg": 14,
    "pf-m-secondary": 25,
    "pf-m-tertiary": 17,
    "pf-m-control": 25,
    "pf-m-disabled": 56,
    "pf-m-aria-disabled": 12,
    "pf-m-progress": 3,
    "pf-m-in-progress": 15,
    "pf-m-start": 3,
    "pf-m-end": 3,
    "pf-c-spinner": 26,
    "pf-c-card": 46,
    "pf-c-card__actions": 17,
    "pf-c-card__body": 13,
    "pf-c-card__expandable-content": 3,
    "pf-c-card__footer": 11,
    "pf-c-card__header": 21,
    "pf-c-card__header-toggle": 5,
    "pf-c-card__header-toggle-icon": 5,
    "pf-c-card__title": 19,
    "pf-c-divider": 163,
    "pf-m-hoverable": 3,
    "pf-m-selectable": 14,
    "pf-m-selected": 97,
    "pf-m-compact": 6,
    "pf-m-flat": 3,
    "pf-m-rounded": 3,
    "pf-m-full-height": 40,
    "pf-m-toggle-right": 9,
    "pf-m-no-offset": 3,
    "pf-m-no-fill": 3,
    "pf-c-check": 17,
    "pf-c-check__body": 3,
    "pf-c-check__description": 3,
    "pf-c-check__input": 9,
    "pf-c-check__label": 14,
    "pf-m-standalone": 6,
    "pf-c-chip": 19,
    "pf-c-chip__icon": 7,
    "pf-c-chip__text": 9,
    "pf-m-overflow": 12,
    "pf-m-draggable": 11,
    "pf-c-chip-group": 17,
    "pf-c-chip-group__close": 3,
    "pf-c-chip-group__label": 3,
    "pf-c-chip-group__list": 5,
    "pf-c-chip-group__list-item": 3,
    "pf-c-chip-group__main": 3,
    "pf-m-category": 6,
    "pf-c-content": 122,
    "pf-m-visited": 5,
    "pf-m-hidden": 15,
    "pf-m-hidden-on-sm": 12,
    "pf-m-visible-on-sm": 12,
    "pf-m-hidden-on-md": 12,
    "pf-m-visible-on-md": 12,
    "pf-m-hidden-on-lg": 12,
    "pf-m-visible-on-lg": 12,
    "pf-m-hidden-on-xl": 12,
    "pf-m-visible-on-xl": 12,
    "pf-m-hidden-on-2xl": 12,
    "pf-m-visible-on-2xl": 12,
    "pf-m-vertical": 30,
    "pf-m-inset-none": 6,
    "pf-m-inset-xs": 3,
    "pf-m-inset-sm": 6,
    "pf-m-inset-md": 6,
    "pf-m-inset-lg": 6,
    "pf-m-inset-xl": 6,
    "pf-m-inset-2xl": 6,
    "pf-m-inset-3xl": 3,
    "pf-m-inset-none-on-sm": 6,
    "pf-m-inset-xs-on-sm": 3,
    "pf-m-inset-sm-on-sm": 6,
    "pf-m-inset-md-on-sm": 6,
    "pf-m-inset-lg-on-sm": 6,
    "pf-m-inset-xl-on-sm": 6,
    "pf-m-inset-2xl-on-sm": 6,
    "pf-m-inset-3xl-on-sm": 3,
    "pf-m-inset-none-on-md": 6,
    "pf-m-inset-xs-on-md": 3,
    "pf-m-inset-sm-on-md": 6,
    "pf-m-inset-md-on-md": 6,
    "pf-m-inset-lg-on-md": 6,
    "pf-m-inset-xl-on-md": 6,
    "pf-m-inset-2xl-on-md": 6,
    "pf-m-inset-3xl-on-md": 3,
    "pf-m-inset-none-on-lg": 6,
    "pf-m-inset-xs-on-lg": 3,
    "pf-m-inset-sm-on-lg": 6,
    "pf-m-inset-md-on-lg": 6,
    "pf-m-inset-lg-on-lg": 6,
    "pf-m-inset-xl-on-lg": 6,
    "pf-m-inset-2xl-on-lg": 6,
    "pf-m-inset-3xl-on-lg": 3,
    "pf-m-inset-none-on-xl": 6,
    "pf-m-inset-xs-on-xl": 3,
    "pf-m-inset-sm-on-xl": 6,
    "pf-m-inset-md-on-xl": 6,
    "pf-m-inset-lg-on-xl": 6,
    "pf-m-inset-xl-on-xl": 6,
    "pf-m-inset-2xl-on-xl": 6,
    "pf-m-inset-3xl-on-xl": 3,
    "pf-m-inset-none-on-2xl": 6,
    "pf-m-inset-xs-on-2xl": 3,
    "pf-m-inset-sm-on-2xl": 6,
    "pf-m-inset-md-on-2xl": 6,
    "pf-m-inset-lg-on-2xl": 6,
    "pf-m-inset-xl-on-2xl": 6,
    "pf-m-inset-2xl-on-2xl": 6,
    "pf-m-inset-3xl-on-2xl": 3,
    "pf-c-drawer": 229,
    "pf-c-drawer__actions": 7,
    "pf-c-drawer__body": 43,
    "pf-c-drawer__close": 25,
    "pf-c-drawer__content": 39,
    "pf-c-drawer__head": 31,
    "pf-c-drawer__main": 212,
    "pf-c-drawer__panel": 247,
    "pf-c-drawer__panel-main": 7,
    "pf-c-drawer__section": 7,
    "pf-c-drawer__splitter": 25,
    "pf-c-drawer__splitter-handle": 5,
    "pf-m-panel-bottom": 47,
    "pf-m-no-border": 33,
    "pf-m-resizable": 31,
    "pf-m-static": 28,
    "pf-m-panel-left": 53,
    "pf-m-resizing": 5,
    "pf-m-no-background": 7,
    "pf-m-light-200": 7,
    "pf-m-no-padding": 15,
    "pf-m-padding": 3,
    "pf-m-width-25": 3,
    "pf-m-width-33": 3,
    "pf-m-width-50": 3,
    "pf-m-width-66": 3,
    "pf-m-width-75": 3,
    "pf-m-width-100": 3,
    "pf-m-width-25-on-lg": 3,
    "pf-m-width-33-on-lg": 3,
    "pf-m-width-50-on-lg": 3,
    "pf-m-width-66-on-lg": 3,
    "pf-m-width-75-on-lg": 3,
    "pf-m-width-100-on-lg": 3,
    "pf-m-width-25-on-xl": 3,
    "pf-m-width-33-on-xl": 3,
    "pf-m-width-50-on-xl": 3,
    "pf-m-width-66-on-xl": 3,
    "pf-m-width-75-on-xl": 3,
    "pf-m-width-100-on-xl": 3,
    "pf-m-width-25-on-2xl": 3,
    "pf-m-width-33-on-2xl": 3,
    "pf-m-width-50-on-2xl": 3,
    "pf-m-width-66-on-2xl": 3,
    "pf-m-width-75-on-2xl": 3,
    "pf-m-width-100-on-2xl": 3,
    "pf-m-inline-on-lg": 25,
    "pf-m-static-on-lg": 15,
    "pf-m-inline-on-xl": 25,
    "pf-m-static-on-xl": 15,
    "pf-m-inline-on-2xl": 25,
    "pf-m-static-on-2xl": 15,
    "pf-c-page__main": 3,
    "pf-c-dropdown": 49,
    "pf-c-dropdown__group": 5,
    "pf-c-dropdown__group-title": 3,
    "pf-c-dropdown__menu": 31,
    "pf-c-dropdown__menu-item": 31,
    "pf-c-dropdown__menu-item-description": 3,
    "pf-c-dropdown__menu-item-icon": 5,
    "pf-c-dropdown__menu-item-main": 3,
    "pf-c-dropdown__toggle": 107,
    "pf-c-dropdown__toggle-button": 19,
    "pf-c-dropdown__toggle-check": 7,
    "pf-c-dropdown__toggle-icon": 5,
    "pf-c-dropdown__toggle-image": 5,
    "pf-c-dropdown__toggle-text": 5,
    "pf-c-menu": 31,
    "pf-m-action": 41,
    "pf-m-split-button": 27,
    "pf-m-top": 22,
    "pf-m-align-right": 23,
    "pf-m-align-left": 17,
    "pf-m-align-right-on-sm": 17,
    "pf-m-align-left-on-sm": 17,
    "pf-m-align-right-on-md": 17,
    "pf-m-align-left-on-md": 17,
    "pf-m-align-right-on-lg": 17,
    "pf-m-align-left-on-lg": 17,
    "pf-m-align-right-on-xl": 17,
    "pf-m-align-left-on-xl": 17,
    "pf-m-align-right-on-2xl": 17,
    "pf-m-align-left-on-2xl": 17,
    "pf-m-icon": 23,
    "pf-m-description": 12,
    "pf-m-text": 7,
    "pf-c-empty-state": 21,
    "pf-c-empty-state__body": 7,
    "pf-c-empty-state__content": 11,
    "pf-c-empty-state__icon": 3,
    "pf-c-empty-state__primary": 5,
    "pf-c-empty-state__secondary": 9,
    "pf-m-xs": 7,
    "pf-m-sm": 12,
    "pf-m-lg": 18,
    "pf-m-xl": 13,
    "pf-c-title": 25,
    "pf-c-form": 17,
    "pf-c-form__actions": 5,
    "pf-c-form__field-group": 29,
    "pf-c-form__field-group-body": 9,
    "pf-c-form__field-group-header": 5,
    "pf-c-form__field-group-header-actions": 3,
    "pf-c-form__field-group-header-description": 3,
    "pf-c-form__field-group-header-main": 3,
    "pf-c-form__field-group-header-title": 3,
    "pf-c-form__field-group-header-title-text": 3,
    "pf-c-form__field-group-toggle": 9,
    "pf-c-form__field-group-toggle-button": 3,
    "pf-c-form__field-group-toggle-icon": 3,
    "pf-c-form__fieldset": 3,
    "pf-c-form__group": 7,
    "pf-c-form__group-control": 13,
    "pf-c-form__group-label": 9,
    "pf-c-form__group-label-help": 7,
    "pf-c-form__group-label-info": 3,
    "pf-c-form__group-label-main": 3,
    "pf-c-form__helper-text": 15,
    "pf-c-form__helper-text-icon": 3,
    "pf-c-form__label": 13,
    "pf-c-form__label-required": 3,
    "pf-c-form__label-text": 3,
    "pf-c-form__section": 7,
    "pf-c-form__section-title": 3,
    "pf-m-horizontal": 13,
    "pf-m-no-padding-top": 3,
    "pf-m-limit-width": 3,
    "pf-m-stack": 3,
    "pf-m-error": 3,
    "pf-m-inactive": 3,
    "pf-c-form-control": 71,
    "pf-m-search": 3,
    "pf-m-calendar": 3,
    "pf-m-clock": 3,
    "pf-m-placeholder": 6,
    "pf-m-resize-vertical": 3,
    "pf-m-resize-horizontal": 3,
    "pf-c-inline-edit": 35,
    "pf-c-inline-edit__action": 23,
    "pf-c-inline-edit__editable-text": 3,
    "pf-c-inline-edit__group": 23,
    "pf-c-inline-edit__input": 13,
    "pf-c-inline-edit__label": 5,
    "pf-c-inline-edit__value": 5,
    "pf-m-icon-group": 3,
    "pf-m-footer": 3,
    "pf-m-column": 8,
    "pf-m-valid": 5,
    "pf-m-action-group": 11,
    "pf-m-enable-editable": 7,
    "pf-m-inline-editable": 33,
    "pf-m-enable": 3,
    "pf-m-bold": 3,
    "pf-c-input-group": 19,
    "pf-c-input-group__text": 7,
    "pf-c-label": 41,
    "pf-c-label__content": 39,
    "pf-c-label__icon": 5,
    "pf-c-label__text": 3,
    "pf-m-blue": 3,
    "pf-m-green": 3,
    "pf-m-orange": 3,
    "pf-m-red": 3,
    "pf-m-purple": 3,
    "pf-m-cyan": 3,
    "pf-m-outline": 11,
    "pf-m-editable-active": 5,
    "pf-c-label-group": 33,
    "pf-c-label-group__close": 5,
    "pf-c-label-group__label": 3,
    "pf-c-label-group__list": 9,
    "pf-c-label-group__list-item": 7,
    "pf-c-label-group__main": 9,
    "pf-c-label-group__textarea": 7,
    "pf-m-editable": 15,
    "pf-m-textarea": 3,
    "pf-c-list": 29,
    "pf-c-list__item": 3,
    "pf-c-list__item-icon": 3,
    "pf-m-icon-lg": 3,
    "pf-m-bordered": 5,
    "pf-c-modal-box": 37,
    "pf-c-modal-box__body": 11,
    "pf-c-modal-box__description": 3,
    "pf-c-modal-box__footer": 9,
    "pf-c-modal-box__header": 9,
    "pf-c-modal-box__header-main": 3,
    "pf-c-modal-box__title": 7,
    "pf-c-modal-box__title-icon": 3,
    "pf-c-modal-box__title-text": 3,
    "pf-m-md": 11,
    "pf-m-align-top": 3,
    "pf-m-default": 3,
    "pf-m-help": 3,
    "pf-m-width-auto": 3,
    "pf-m-top-left": 5,
    "pf-m-top-right": 5,
    "pf-m-bottom": 6,
    "pf-m-bottom-left": 5,
    "pf-m-bottom-right": 5,
    "pf-m-left": 6,
    "pf-m-left-top": 5,
    "pf-m-left-bottom": 5,
    "pf-m-right": 7,
    "pf-m-right-top": 5,
    "pf-m-right-bottom": 5,
    "pf-c-popover": 49,
    "pf-c-popover__arrow": 43,
    "pf-c-popover__body": 3,
    "pf-c-popover__content": 9,
    "pf-c-popover__footer": 3,
    "pf-c-radio": 7,
    "pf-c-radio__body": 3,
    "pf-c-radio__description": 3,
    "pf-c-radio__input": 13,
    "pf-c-radio__label": 9,
    "pf-m-hint": 5,
    "pf-c-search-input": 5,
    "pf-c-search-input__bar": 5,
    "pf-c-search-input__count": 3,
    "pf-c-search-input__icon": 3,
    "pf-c-search-input__menu": 5,
    "pf-c-search-input__menu-body": 3,
    "pf-c-search-input__menu-item": 7,
    "pf-c-search-input__menu-item-text": 3,
    "pf-c-search-input__menu-list": 3,
    "pf-c-search-input__nav": 3,
    "pf-c-search-input__text": 17,
    "pf-c-search-input__text-input": 9,
    "pf-c-search-input__utilities": 7,
    "pf-m-invalid": 3,
    "pf-m-typeahead": 5,
    "pf-m-favorite": 3,
    "pf-m-favorite-action": 3,
    "pf-m-focus": 7,
    "pf-m-load": 3,
    "pf-m-loading": 3,
    "pf-c-select": 21,
    "pf-c-select__list-item": 3,
    "pf-c-select__menu": 7,
    "pf-c-select__menu-fieldset": 3,
    "pf-c-select__menu-footer": 3,
    "pf-c-select__menu-group": 5,
    "pf-c-select__menu-group-title": 3,
    "pf-c-select__menu-item": 41,
    "pf-c-select__menu-item-action-icon": 3,
    "pf-c-select__menu-item-count": 3,
    "pf-c-select__menu-item-description": 3,
    "pf-c-select__menu-item-icon": 3,
    "pf-c-select__menu-item-main": 3,
    "pf-c-select__menu-item--match": 3,
    "pf-c-select__menu-item-row": 3,
    "pf-c-select__menu-item-text": 3,
    "pf-c-select__menu-search": 5,
    "pf-c-select__menu-wrapper": 13,
    "pf-c-select__toggle": 39,
    "pf-c-select__toggle-arrow": 5,
    "pf-c-select__toggle-badge": 3,
    "pf-c-select__toggle-button": 5,
    "pf-c-select__toggle-clear": 5,
    "pf-c-select__toggle-icon": 3,
    "pf-c-select__toggle-status-icon": 3,
    "pf-c-select__toggle-text": 5,
    "pf-c-select__toggle-typeahead": 9,
    "pf-c-select__toggle-wrapper": 11,
    "pf-c-spinner__clipper": 5,
    "pf-c-spinner__lead-ball": 5,
    "pf-c-spinner__path": 3,
    "pf-c-spinner__tail-ball": 5,
    "pf-m-4xl": 3,
    "pf-m-3xl": 3,
    "pf-m-2xl": 3,
    "pf-m-page-insets": 10,
    "pf-m-sticky-top": 3,
    "pf-m-button-group": 5,
    "pf-m-icon-button-group": 5,
    "pf-m-filter-group": 7,
    "pf-m-toggle-group": 57,
    "pf-m-overflow-menu": 3,
    "pf-m-bulk-select": 3,
    "pf-m-expand-all": 3,
    "pf-m-search-filter": 3,
    "pf-m-chip-group": 3,
    "pf-m-label": 5,
    "pf-m-pagination": 53,
    "pf-m-chip-container": 21,
    "pf-m-show": 9,
    "pf-m-show-on-sm": 9,
    "pf-m-show-on-md": 9,
    "pf-m-show-on-lg": 9,
    "pf-m-show-on-xl": 9,
    "pf-m-show-on-2xl": 9,
    "pf-m-nowrap": 8,
    "pf-m-wrap": 8,
    "pf-m-nowrap-on-sm": 8,
    "pf-m-wrap-on-sm": 8,
    "pf-m-nowrap-on-md": 8,
    "pf-m-wrap-on-md": 8,
    "pf-m-nowrap-on-lg": 8,
    "pf-m-wrap-on-lg": 8,
    "pf-m-nowrap-on-xl": 8,
    "pf-m-wrap-on-xl": 8,
    "pf-m-nowrap-on-2xl": 8,
    "pf-m-wrap-on-2xl": 8,
    "pf-m-space-items-none": 10,
    "pf-m-space-items-sm": 10,
    "pf-m-space-items-md": 10,
    "pf-m-space-items-lg": 10,
    "pf-m-space-items-none-on-sm": 10,
    "pf-m-space-items-sm-on-sm": 10,
    "pf-m-space-items-md-on-sm": 10,
    "pf-m-space-items-lg-on-sm": 10,
    "pf-m-space-items-none-on-md": 10,
    "pf-m-space-items-sm-on-md": 10,
    "pf-m-space-items-md-on-md": 10,
    "pf-m-space-items-lg-on-md": 10,
    "pf-m-space-items-none-on-lg": 10,
    "pf-m-space-items-sm-on-lg": 10,
    "pf-m-space-items-md-on-lg": 10,
    "pf-m-space-items-lg-on-lg": 10,
    "pf-m-space-items-none-on-xl": 10,
    "pf-m-space-items-sm-on-xl": 10,
    "pf-m-space-items-md-on-xl": 10,
    "pf-m-space-items-lg-on-xl": 10,
    "pf-m-space-items-none-on-2xl": 10,
    "pf-m-space-items-sm-on-2xl": 10,
    "pf-m-space-items-md-on-2xl": 10,
    "pf-m-space-items-lg-on-2xl": 10,
    "pf-m-spacer-none": 10,
    "pf-m-spacer-sm": 10,
    "pf-m-spacer-md": 10,
    "pf-m-spacer-lg": 10,
    "pf-m-spacer-none-on-sm": 10,
    "pf-m-spacer-sm-on-sm": 10,
    "pf-m-spacer-md-on-sm": 10,
    "pf-m-spacer-lg-on-sm": 10,
    "pf-m-spacer-none-on-md": 10,
    "pf-m-spacer-sm-on-md": 10,
    "pf-m-spacer-md-on-md": 10,
    "pf-m-spacer-lg-on-md": 10,
    "pf-m-spacer-none-on-lg": 10,
    "pf-m-spacer-sm-on-lg": 10,
    "pf-m-spacer-md-on-lg": 10,
    "pf-m-spacer-lg-on-lg": 10,
    "pf-m-spacer-none-on-xl": 10,
    "pf-m-spacer-sm-on-xl": 10,
    "pf-m-spacer-md-on-xl": 10,
    "pf-m-spacer-lg-on-xl": 10,
    "pf-m-spacer-none-on-2xl": 10,
    "pf-m-spacer-sm-on-2xl": 10,
    "pf-m-spacer-md-on-2xl": 10,
    "pf-m-spacer-lg-on-2xl": 10,
    "pf-c-pagination": 3,
    "pf-c-toolbar": 459,
    "pf-c-toolbar__content": 45,
    "pf-c-toolbar__content-section": 65,
    "pf-c-toolbar__expand-all-icon": 3,
    "pf-c-toolbar__expandable-content": 19,
    "pf-c-toolbar__group": 169,
    "pf-c-toolbar__item": 141,
    "pf-c-toolbar__toggle": 17,
    "pf-m-text-align-left": 3,
    "pf-c-tooltip": 11,
    "pf-c-tooltip__arrow": 11,
    "pf-c-tooltip__content": 5,
    "pf-m-finished": 9,
    "pf-c-page__main-wizard": 3,
    "pf-c-wizard": 31,
    "pf-c-wizard__close": 3,
    "pf-c-wizard__description": 5,
    "pf-c-wizard__footer": 13,
    "pf-c-wizard__footer-cancel": 3,
    "pf-c-wizard__header": 11,
    "pf-c-wizard__inner-wrap": 5,
    "pf-c-wizard__main": 3,
    "pf-c-wizard__main-body": 5,
    "pf-c-wizard__nav": 9,
    "pf-c-wizard__nav-item": 15,
    "pf-c-wizard__nav-link": 31,
    "pf-c-wizard__nav-link-text": 3,
    "pf-c-wizard__nav-link-toggle": 3,
    "pf-c-wizard__nav-link-toggle-icon": 3,
    "pf-c-wizard__nav-list": 19,
    "pf-c-wizard__outer-wrap": 7,
    "pf-c-wizard__title": 3,
    "pf-c-wizard__toggle": 11,
    "pf-c-wizard__toggle-icon": 5,
    "pf-c-wizard__toggle-list": 3,
    "pf-c-wizard__toggle-list-item": 5,
    "pf-c-wizard__toggle-num": 7,
    "pf-c-wizard__toggle-separator": 3,
    "pf-l-bullseye": 3,
    "pf-l-flex": 1003,
    "pf-m-flex": 3,
    "pf-m-inline-flex": 3,
    "pf-m-column-reverse": 5,
    "pf-m-row": 5,
    "pf-m-row-reverse": 5,
    "pf-m-wrap-reverse": 3,
    "pf-m-justify-content-flex-start": 3,
    "pf-m-justify-content-flex-end": 3,
    "pf-m-justify-content-center": 3,
    "pf-m-justify-content-space-between": 3,
    "pf-m-justify-content-space-around": 3,
    "pf-m-justify-content-space-evenly": 3,
    "pf-m-align-items-flex-start": 3,
    "pf-m-align-items-flex-end": 3,
    "pf-m-align-items-center": 3,
    "pf-m-align-items-stretch": 3,
    "pf-m-align-items-baseline": 3,
    "pf-m-align-content-flex-start": 3,
    "pf-m-align-content-flex-end": 3,
    "pf-m-align-content-center": 3,
    "pf-m-align-content-stretch": 3,
    "pf-m-align-content-space-between": 3,
    "pf-m-align-content-space-around": 3,
    "pf-m-grow": 3,
    "pf-m-shrink": 3,
    "pf-m-full-width": 3,
    "pf-m-flex-1": 3,
    "pf-m-flex-2": 3,
    "pf-m-flex-3": 3,
    "pf-m-flex-4": 3,
    "pf-m-flex-default": 3,
    "pf-m-flex-none": 3,
    "pf-m-align-self-flex-start": 3,
    "pf-m-align-self-flex-end": 3,
    "pf-m-align-self-center": 3,
    "pf-m-align-self-baseline": 3,
    "pf-m-align-self-stretch": 3,
    "pf-m-flex-on-sm": 3,
    "pf-m-inline-flex-on-sm": 3,
    "pf-m-column-on-sm": 5,
    "pf-m-column-reverse-on-sm": 5,
    "pf-m-row-on-sm": 5,
    "pf-m-row-reverse-on-sm": 5,
    "pf-m-wrap-reverse-on-sm": 3,
    "pf-m-justify-content-flex-start-on-sm": 3,
    "pf-m-justify-content-flex-end-on-sm": 3,
    "pf-m-justify-content-center-on-sm": 3,
    "pf-m-justify-content-space-between-on-sm": 3,
    "pf-m-justify-content-space-around-on-sm": 3,
    "pf-m-justify-content-space-evenly-on-sm": 3,
    "pf-m-align-items-flex-start-on-sm": 3,
    "pf-m-align-items-flex-end-on-sm": 3,
    "pf-m-align-items-center-on-sm": 3,
    "pf-m-align-items-stretch-on-sm": 3,
    "pf-m-align-items-baseline-on-sm": 3,
    "pf-m-align-content-flex-start-on-sm": 3,
    "pf-m-align-content-flex-end-on-sm": 3,
    "pf-m-align-content-center-on-sm": 3,
    "pf-m-align-content-stretch-on-sm": 3,
    "pf-m-align-content-space-between-on-sm": 3,
    "pf-m-align-content-space-around-on-sm": 3,
    "pf-m-grow-on-sm": 3,
    "pf-m-shrink-on-sm": 3,
    "pf-m-full-width-on-sm": 3,
    "pf-m-flex-1-on-sm": 3,
    "pf-m-flex-2-on-sm": 3,
    "pf-m-flex-3-on-sm": 3,
    "pf-m-flex-4-on-sm": 3,
    "pf-m-flex-default-on-sm": 3,
    "pf-m-flex-none-on-sm": 3,
    "pf-m-align-self-flex-start-on-sm": 3,
    "pf-m-align-self-flex-end-on-sm": 3,
    "pf-m-align-self-center-on-sm": 3,
    "pf-m-align-self-baseline-on-sm": 3,
    "pf-m-align-self-stretch-on-sm": 3,
    "pf-m-flex-on-md": 3,
    "pf-m-inline-flex-on-md": 3,
    "pf-m-column-on-md": 5,
    "pf-m-column-reverse-on-md": 5,
    "pf-m-row-on-md": 5,
    "pf-m-row-reverse-on-md": 5,
    "pf-m-wrap-reverse-on-md": 3,
    "pf-m-justify-content-flex-start-on-md": 3,
    "pf-m-justify-content-flex-end-on-md": 3,
    "pf-m-justify-content-center-on-md": 3,
    "pf-m-justify-content-space-between-on-md": 3,
    "pf-m-justify-content-space-around-on-md": 3,
    "pf-m-justify-content-space-evenly-on-md": 3,
    "pf-m-align-items-flex-start-on-md": 3,
    "pf-m-align-items-flex-end-on-md": 3,
    "pf-m-align-items-center-on-md": 3,
    "pf-m-align-items-stretch-on-md": 3,
    "pf-m-align-items-baseline-on-md": 3,
    "pf-m-align-content-flex-start-on-md": 3,
    "pf-m-align-content-flex-end-on-md": 3,
    "pf-m-align-content-center-on-md": 3,
    "pf-m-align-content-stretch-on-md": 3,
    "pf-m-align-content-space-between-on-md": 3,
    "pf-m-align-content-space-around-on-md": 3,
    "pf-m-grow-on-md": 3,
    "pf-m-shrink-on-md": 3,
    "pf-m-full-width-on-md": 3,
    "pf-m-flex-1-on-md": 3,
    "pf-m-flex-2-on-md": 3,
    "pf-m-flex-3-on-md": 3,
    "pf-m-flex-4-on-md": 3,
    "pf-m-flex-default-on-md": 3,
    "pf-m-flex-none-on-md": 3,
    "pf-m-align-self-flex-start-on-md": 3,
    "pf-m-align-self-flex-end-on-md": 3,
    "pf-m-align-self-center-on-md": 3,
    "pf-m-align-self-baseline-on-md": 3,
    "pf-m-align-self-stretch-on-md": 3,
    "pf-m-flex-on-lg": 3,
    "pf-m-inline-flex-on-lg": 3,
    "pf-m-column-on-lg": 5,
    "pf-m-column-reverse-on-lg": 5,
    "pf-m-row-on-lg": 5,
    "pf-m-row-reverse-on-lg": 5,
    "pf-m-wrap-reverse-on-lg": 3,
    "pf-m-justify-content-flex-start-on-lg": 3,
    "pf-m-justify-content-flex-end-on-lg": 3,
    "pf-m-justify-content-center-on-lg": 3,
    "pf-m-justify-content-space-between-on-lg": 3,
    "pf-m-justify-content-space-around-on-lg": 3,
    "pf-m-justify-content-space-evenly-on-lg": 3,
    "pf-m-align-items-flex-start-on-lg": 3,
    "pf-m-align-items-flex-end-on-lg": 3,
    "pf-m-align-items-center-on-lg": 3,
    "pf-m-align-items-stretch-on-lg": 3,
    "pf-m-align-items-baseline-on-lg": 3,
    "pf-m-align-content-flex-start-on-lg": 3,
    "pf-m-align-content-flex-end-on-lg": 3,
    "pf-m-align-content-center-on-lg": 3,
    "pf-m-align-content-stretch-on-lg": 3,
    "pf-m-align-content-space-between-on-lg": 3,
    "pf-m-align-content-space-around-on-lg": 3,
    "pf-m-grow-on-lg": 3,
    "pf-m-shrink-on-lg": 3,
    "pf-m-full-width-on-lg": 3,
    "pf-m-flex-1-on-lg": 3,
    "pf-m-flex-2-on-lg": 3,
    "pf-m-flex-3-on-lg": 3,
    "pf-m-flex-4-on-lg": 3,
    "pf-m-flex-default-on-lg": 3,
    "pf-m-flex-none-on-lg": 3,
    "pf-m-align-self-flex-start-on-lg": 3,
    "pf-m-align-self-flex-end-on-lg": 3,
    "pf-m-align-self-center-on-lg": 3,
    "pf-m-align-self-baseline-on-lg": 3,
    "pf-m-align-self-stretch-on-lg": 3,
    "pf-m-flex-on-xl": 3,
    "pf-m-inline-flex-on-xl": 3,
    "pf-m-column-on-xl": 5,
    "pf-m-column-reverse-on-xl": 5,
    "pf-m-row-on-xl": 5,
    "pf-m-row-reverse-on-xl": 5,
    "pf-m-wrap-reverse-on-xl": 3,
    "pf-m-justify-content-flex-start-on-xl": 3,
    "pf-m-justify-content-flex-end-on-xl": 3,
    "pf-m-justify-content-center-on-xl": 3,
    "pf-m-justify-content-space-between-on-xl": 3,
    "pf-m-justify-content-space-around-on-xl": 3,
    "pf-m-justify-content-space-evenly-on-xl": 3,
    "pf-m-align-items-flex-start-on-xl": 3,
    "pf-m-align-items-flex-end-on-xl": 3,
    "pf-m-align-items-center-on-xl": 3,
    "pf-m-align-items-stretch-on-xl": 3,
    "pf-m-align-items-baseline-on-xl": 3,
    "pf-m-align-content-flex-start-on-xl": 3,
    "pf-m-align-content-flex-end-on-xl": 3,
    "pf-m-align-content-center-on-xl": 3,
    "pf-m-align-content-stretch-on-xl": 3,
    "pf-m-align-content-space-between-on-xl": 3,
    "pf-m-align-content-space-around-on-xl": 3,
    "pf-m-grow-on-xl": 3,
    "pf-m-shrink-on-xl": 3,
    "pf-m-full-width-on-xl": 3,
    "pf-m-flex-1-on-xl": 3,
    "pf-m-flex-2-on-xl": 3,
    "pf-m-flex-3-on-xl": 3,
    "pf-m-flex-4-on-xl": 3,
    "pf-m-flex-default-on-xl": 3,
    "pf-m-flex-none-on-xl": 3,
    "pf-m-align-self-flex-start-on-xl": 3,
    "pf-m-align-self-flex-end-on-xl": 3,
    "pf-m-align-self-center-on-xl": 3,
    "pf-m-align-self-baseline-on-xl": 3,
    "pf-m-align-self-stretch-on-xl": 3,
    "pf-m-flex-on-2xl": 3,
    "pf-m-inline-flex-on-2xl": 3,
    "pf-m-column-on-2xl": 5,
    "pf-m-column-reverse-on-2xl": 5,
    "pf-m-row-on-2xl": 5,
    "pf-m-row-reverse-on-2xl": 5,
    "pf-m-wrap-reverse-on-2xl": 3,
    "pf-m-justify-content-flex-start-on-2xl": 3,
    "pf-m-justify-content-flex-end-on-2xl": 3,
    "pf-m-justify-content-center-on-2xl": 3,
    "pf-m-justify-content-space-between-on-2xl": 3,
    "pf-m-justify-content-space-around-on-2xl": 3,
    "pf-m-justify-content-space-evenly-on-2xl": 3,
    "pf-m-align-items-flex-start-on-2xl": 3,
    "pf-m-align-items-flex-end-on-2xl": 3,
    "pf-m-align-items-center-on-2xl": 3,
    "pf-m-align-items-stretch-on-2xl": 3,
    "pf-m-align-items-baseline-on-2xl": 3,
    "pf-m-align-content-flex-start-on-2xl": 3,
    "pf-m-align-content-flex-end-on-2xl": 3,
    "pf-m-align-content-center-on-2xl": 3,
    "pf-m-align-content-stretch-on-2xl": 3,
    "pf-m-align-content-space-between-on-2xl": 3,
    "pf-m-align-content-space-around-on-2xl": 3,
    "pf-m-grow-on-2xl": 3,
    "pf-m-shrink-on-2xl": 3,
    "pf-m-full-width-on-2xl": 3,
    "pf-m-flex-1-on-2xl": 3,
    "pf-m-flex-2-on-2xl": 3,
    "pf-m-flex-3-on-2xl": 3,
    "pf-m-flex-4-on-2xl": 3,
    "pf-m-flex-default-on-2xl": 3,
    "pf-m-flex-none-on-2xl": 3,
    "pf-m-align-self-flex-start-on-2xl": 3,
    "pf-m-align-self-flex-end-on-2xl": 3,
    "pf-m-align-self-center-on-2xl": 3,
    "pf-m-align-self-baseline-on-2xl": 3,
    "pf-m-align-self-stretch-on-2xl": 3,
    "pf-m-space-items-xs": 5,
    "pf-m-space-items-xl": 5,
    "pf-m-space-items-2xl": 5,
    "pf-m-space-items-3xl": 5,
    "pf-m-space-items-4xl": 5,
    "pf-m-space-items-xs-on-sm": 5,
    "pf-m-space-items-xl-on-sm": 5,
    "pf-m-space-items-2xl-on-sm": 5,
    "pf-m-space-items-3xl-on-sm": 5,
    "pf-m-space-items-4xl-on-sm": 5,
    "pf-m-space-items-xs-on-md": 5,
    "pf-m-space-items-xl-on-md": 5,
    "pf-m-space-items-2xl-on-md": 5,
    "pf-m-space-items-3xl-on-md": 5,
    "pf-m-space-items-4xl-on-md": 5,
    "pf-m-space-items-xs-on-lg": 5,
    "pf-m-space-items-xl-on-lg": 5,
    "pf-m-space-items-2xl-on-lg": 5,
    "pf-m-space-items-3xl-on-lg": 5,
    "pf-m-space-items-4xl-on-lg": 5,
    "pf-m-space-items-xs-on-xl": 5,
    "pf-m-space-items-xl-on-xl": 5,
    "pf-m-space-items-2xl-on-xl": 5,
    "pf-m-space-items-3xl-on-xl": 5,
    "pf-m-space-items-4xl-on-xl": 5,
    "pf-m-space-items-xs-on-2xl": 5,
    "pf-m-space-items-xl-on-2xl": 5,
    "pf-m-space-items-2xl-on-2xl": 5,
    "pf-m-space-items-3xl-on-2xl": 5,
    "pf-m-space-items-4xl-on-2xl": 5,
    "pf-m-spacer-xs": 5,
    "pf-m-spacer-xl": 5,
    "pf-m-spacer-2xl": 5,
    "pf-m-spacer-3xl": 5,
    "pf-m-spacer-4xl": 5,
    "pf-m-spacer-xs-on-sm": 5,
    "pf-m-spacer-xl-on-sm": 5,
    "pf-m-spacer-2xl-on-sm": 5,
    "pf-m-spacer-3xl-on-sm": 5,
    "pf-m-spacer-4xl-on-sm": 5,
    "pf-m-spacer-xs-on-md": 5,
    "pf-m-spacer-xl-on-md": 5,
    "pf-m-spacer-2xl-on-md": 5,
    "pf-m-spacer-3xl-on-md": 5,
    "pf-m-spacer-4xl-on-md": 5,
    "pf-m-spacer-xs-on-lg": 5,
    "pf-m-spacer-xl-on-lg": 5,
    "pf-m-spacer-2xl-on-lg": 5,
    "pf-m-spacer-3xl-on-lg": 5,
    "pf-m-spacer-4xl-on-lg": 5,
    "pf-m-spacer-xs-on-xl": 5,
    "pf-m-spacer-xl-on-xl": 5,
    "pf-m-spacer-2xl-on-xl": 5,
    "pf-m-spacer-3xl-on-xl": 5,
    "pf-m-spacer-4xl-on-xl": 5,
    "pf-m-spacer-xs-on-2xl": 5,
    "pf-m-spacer-xl-on-2xl": 5,
    "pf-m-spacer-2xl-on-2xl": 5,
    "pf-m-spacer-3xl-on-2xl": 5,
    "pf-m-spacer-4xl-on-2xl": 5,
    "pf-l-gallery": 25,
    "pf-m-gutter": 3,
    "pf-u-hidden": 3,
    "pf-u-hidden-on-lg": 3,
    "pf-u-hidden-on-md": 3,
    "pf-u-hidden-on-sm": 3,
    "pf-u-hidden-on-xl": 3,
    "pf-u-hidden-on-2xl": 3,
    "pf-u-screen-reader": 3,
    "pf-u-screen-reader-on-lg": 3,
    "pf-u-screen-reader-on-md": 3,
    "pf-u-screen-reader-on-sm": 3,
    "pf-u-screen-reader-on-xl": 3,
    "pf-u-screen-reader-on-2xl": 3,
    "pf-u-visible": 3,
    "pf-u-visible-on-lg": 3,
    "pf-u-visible-on-md": 3,
    "pf-u-visible-on-sm": 3,
    "pf-u-visible-on-xl": 3,
    "pf-u-visible-on-2xl": 3,
    "pf-c-clipboard-copy": 7,
    "pf-c-clipboard-copy__text": 3,
    "pf-c-clipboard-copy__actions": 3,
    "pf-c-clipboard-copy__actions-item": 5,
    "pf-c-code-block": 3,
    "pf-c-code-block__header": 3,
    "pf-c-code-block__actions": 3,
    "pf-c-code-block__content": 3,
    "pf-c-code-block__pre": 3,
    "pf-c-code-block__code": 3,
    "pf-c-": 6,
    "pf-m-transparent": 4,
    "pf-m-transparent-100": 2,
    "pf-m-transparent-200": 2,
    "pf-m-opaque-100": 4,
    "pf-m-opaque-200": 4,
    "pf-m-opaque-300": 2,
    "pf-c-spinner-animation-rotate": 4,
    "pf-c-spinner-animation-dash": 4,
    "pf-c-modal-box__header-help": 1,
    "pf-c-search-input__clear": 1,
    "pf-c-select__menu-list": 1,
    "pf-c-code-block__actions-item": 1,
    "pf-u-mx-auto": 2,
    "pf-u-mt-20": 1,
    "pf-u-font-family-heading-sans-serif": 1,
    "pf-m-hover": 21,
    "pf-m-": 1,
    "pf-m-dragging": 12,
    "pf-m-source": 4,
    "pf-m-highlight": 6,
    "pf-m-drop-target": 6,
    "pf-m-alt-group": 5,
    "pf-m-solid": 1,
    "pf-m-dotted": 2,
    "pf-m-dashed": 2,
    "pf-m-dashed-md": 2,
    "pf-m-dashed-lg": 2,
    "pf-m-dashed-xl": 2,
    "pf-m-alt-connector-arrow": 1,
    "pf-m-skipped": 12,
    "pf-m-running": 10,
    "pf-m-idle": 10,
    "pf-m-pending": 10,
    "pf-m-spin": 1,
    "pf-m-unmet": 1
  },
  "cssVars": {
    "--pf-v5-global--Color--200": 7,
    "--pf-v5-global--active-color--100": 18,
    "--pf-v5-global--Color--100": 27,
    "--pf-v5-l-gallery--GridTemplateColumns": 2,
    "--pf-v5-global--spacer--sm": 18,
    "--pf-v5-global--FontSize--md": 9,
    "--pf-v5-global--FontFamily--heading--sans-serif": 4,
    "--pf-v5-global--FontWeight--normal": 3,
    "--pf-v5-global--FontWeight--bold": 4,
    "--pf-v5-c-toolbar--PaddingBottom": 2,
    "--pf-v5-c-toolbar--PaddingTop": 1,
    "--pf-v5-c-toolbar--RowGap": 1,
    "--pf-v5-c-select__toggle--FontSize": 1,
    "--pf-v5-c-check__label--FontSize": 1,
    "--pf-v5-global--Color--400": 1,
    "--pf-v5-global--BorderColor--300": 2,
    "--pf-v5-global--spacer--md": 27,
    "--pf-v5-c-page__header--MinHeight": 1,
    "--pf-v5-global--spacer--lg": 17,
    "--pf-v5-global--BackgroundColor--light-100": 2,
    "--pf-v5-global--FontSize--2xl": 2,
    "--pf-v5-c-alert__title--FontWeight": 4,
    "--pf-v5-c-alert__title--Color": 4,
    "--pf-v5-global--BorderWidth--xl": 1,
    "--pf-v5-global--palette--blue-200": 3,
    "--pf-v5-global--palette--black-500": 5,
    "--pf-v5-global--BackgroundColor--100": 14,
    "--pf-v5-c-expandable-section__toggle--Color": 2,
    "--pf-v5-c-expandable-section__toggle--focus--Color": 1,
    "--pf-v5-global--primary-color--100": 2,
    "--pf-v5-global--FontSize--sm": 5,
    "--pf-v5-global--Color--dark-200": 1,
    "--pf-v5-global--Color--300": 1,
    "--pf-v5-global--success-color--100": 17,
    "--pf-v5-global--danger-color--100": 16,
    "--pf-v5-global--BorderRadius--lg": 1,
    "--pf-v5-global--Color--light-100": 34,
    "--pf-v5-global--spacer--xs": 5,
    "--pf-v5-global--FontSize--xl": 1,
    "--pf-v5-global--spacer--xl": 2,
    "--pf-chart-global--danger--Color--100": 1,
    "--pf-v5-global--palette--blue-50": 5,
    "--pf-v5-global--active-color--200": 4,
    "--pf-v5-global--ZIndex--xs": 1,
    "--pf-v5-global--BoxShadow--sm-bottom": 1,
    "--pf-v5-global--palette--blue-400": 1,
    "--pf-v5-global--Color--light-200": 4,
    "--pf-v5-global--BoxShadow--sm-top": 1,
    "--pf-v5-c-list--PaddingLeft": 1,
    "--pf-v5-global--palette--black-200": 3,
    "--pf-v5-global--primary-color--300": 7,
    "--pf-v5-global--BorderColor--100": 26,
    "--pf-v5-global--palette--black-600": 5,
    "--pf-v5-global--BackgroundColor--400": 2,
    "--pf-v5-c-clipboard-copy--m-inline--BackgroundColor": 1,
    "--pf-v5-global--BackgroundColor--200": 3,
    "--pf-v5-c-card--BackgroundColor": 1,
    "--pf-v5-c-alert--BackgroundColor": 1,
    "--pf-v5-global--palette--black-700": 6,
    "--pf-v5-c-alert--m-inline--BackgroundColor": 1,
    "--pf-v5-c-alert--m-inline--m-success--BackgroundColor": 1,
    "--pf-v5-c-alert--m-inline--m-danger--BackgroundColor": 1,
    "--pf-v5-c-alert--m-inline--m-warning--BackgroundColor": 1,
    "--pf-v5-c-alert--m-inline--m-info--BackgroundColor": 1,
    "--pf-v5-global--FontSize--lg": 1,
    "--pf-v5-c-content--MarginBottom": 1,
    "--pf-v5-global--link--Color": 1,
    "--pf-v5-global--palette--black-150": 1,
    "--pf-v5-c-toolbar__expandable-content--lg--PaddingBottom": 1,
    "--pf-v5-l-flex--FlexWrap": 1,
    "--pf-v5-global--palette--black-400": 1,
    "--pf-v5-global--palette--black-1000": 16,
    "--pf-v5-global--palette--green-300": 1,
    "--pf-v5-global--palette--light-blue-200": 1,
    "--pf-v5-c-page__main-section--PaddingTop": 1,
    "--pf-v5-c-page__main-section--PaddingRight": 1,
    "--pf-v5-c-page__main-section--PaddingLeft": 1,
    "--pf-v5-c-page__main-section--PaddingBottom": 1,
    "--pf-v5-global--palette--red-100": 1,
    "--pf-v5-global--palette--gold-100": 1,
    "--pf-v5-global--palette--black-900": 13,
    "--pf-v5-global--palette--black-100": 8,
    "--pf-topology-visualization-surface--BackgroundColor": 3,
    "--pf-topology__node--Color": 6,
    "--pf-topology-create-connector-color": 4,
    "--pf-v5-global--secondary-color--100": 10,
    "--pf-topology__create-connector-color--Stroke": 4,
    "--pf-topology__create-connector-color--Fill": 3,
    "--pf-topology__node__background--Fill": 10,
    "--pf-topology__node__background--Stroke": 11,
    "--pf-topology__node__background--StrokeWidth": 3,
    "--pf-v5-global--BorderWidth--sm": 9,
    "--pf-topology__node--m-dragging--background--StrokeWidth": 3,
    "--pf-topology__node--m-hover--background--Stroke": 3,
    "--pf-topology__node--m-disabled--Background--Fill": 3,
    "--pf-topology__node--m-disabled--Background--Stroke": 3,
    "--pf-topology__node--m-info--Background--Fill": 2,
    "--pf-v5-global--primary-color--light-100": 10,
    "--pf-topology__node--m-success--Background--Fill": 2,
    "--pf-topology__node--m-warning--Background--Fill": 2,
    "--pf-v5-global--warning-color--100": 13,
    "--pf-topology__node--m-danger--Background--Fill": 2,
    "--pf-topology__node--m-selected--Background--Fill": 2,
    "--pf-topology__node--m-selected--node__background--Stroke": 3,
    "--pf-topology__node--m-info--node__background--Stroke": 2,
    "--pf-topology__node--m-success--node__background--Stroke": 2,
    "--pf-topology__node--m-warning--node__background--Stroke": 2,
    "--pf-topology__node--m-danger--node__background--Stroke": 2,
    "--pf-topology__node_decorator--Color": 9,
    "--pf-topology__node__decorator__bg--Fill": 2,
    "--pf-topology__node__decorator__bg--Stroke": 2,
    "--pf-topology__node__decorator__bg--StrokeWidth": 2,
    "--pf-topology__node__decorator__status--m-info--Color": 2,
    "--pf-topology__node__decorator__status--m-danger--Color": 2,
    "--pf-topology__node__decorator__status--m-warning--Color": 2,
    "--pf-topology__node__decorator__status--m-success--Color": 2,
    "--pf-topology__node__label__text--Fill": 4,
    "--pf-topology__node__label__text--m-secondary--Fill": 3,
    "--pf-topology__node--m-selected--node__label__text--Fill": 8,
    "--pf-topology__node--m-selected--m-info--node__label__text--Fill": 4,
    "--pf-topology__node--m-selected--m-danger--node__label__text--Fill": 3,
    "--pf-topology__node--m-selected--m-warning--node__label__text--Fill": 4,
    "--pf-topology__node--m-selected--m-success--node__label__text--Fill": 4,
    "--pf-topology__node--m-selected--node__label__text--m-secondary--Fill": 8,
    "--pf-topology__node--m-selected--m-info--node__label__text--m-secondary--Fill": 3,
    "--pf-topology__node--m-selected--m-warning--node__label__text--m-secondary--Fill": 3,
    "--pf-topology__node--m-selected--m-success--node__label__text--m-secondary--Fill": 3,
    "--pf-topology__node--m-selected--m-danger--node__label__text--m-secondary--Fill": 3,
    "--pf-topology__node__label__background--Fill": 8,
    "--pf-topology__node__label__background--Stroke": 11,
    "--pf-topology__node--m-hover--label__background--Stroke": 3,
    "--pf-topology__node--m-selected--node__label__background--Stroke": 3,
    "--pf-topology__node--m-info--node__label__background--Stroke": 2,
    "--pf-topology__node--m-success--node__label__background--Stroke": 2,
    "--pf-topology__node--m-warning--node__label__background--Stroke": 2,
    "--pf-topology__node--m-danger--node__label__background--Stroke": 2,
    "--pf-topology__node__label__background--StrokeWidth": 4,
    "--pf-topology__node__label--m-dragging--background--StrokeWidth": 3,
    "--pf-topology__node--m-selected--node__label__background--Fill": 3,
    "--pf-topology__node--m-selected--m-info--node__label__background--Fill": 2,
    "--pf-topology__node--m-selected--m-danger--node__label__background--Fill": 2,
    "--pf-topology__node--m-selected--m-warning--node__label__background--Fill": 2,
    "--pf-topology__node--m-selected--m-success--node__label__background--Fill": 2,
    "--pf-topology__node__label__icon--Color": 3,
    "--pf-topology__node__label__icon__background--Fill": 2,
    "--pf-v5-global--palette--white": 10,
    "--pf-topology__node__label__icon__background--StrokeWidth": 2,
    "--pf-topology__node__label__icon__background--Stroke": 2,
    "--pf-topology__node--m-selected--label__icon__background--Stroke": 2,
    "--pf-topology__node--m-info--label__icon__background--Stroke": 2,
    "--pf-topology__node--m-success--label__icon__background--Stroke": 2,
    "--pf-topology__node--m-warning--label__icon__background--Stroke": 2,
    "--pf-topology__node--m-danger--label__icon__background--Stroke": 2,
    "--pf-topology__node__label__badge__rect--StrokeWidth": 2,
    "--pf-topology__node__separator--Stroke": 3,
    "--pf-topology__node--m-selected--separator--Stroke": 1,
    "--pf-topology__node__action-icon__icon--Color": 13,
    "--pf-topology__node--m-selected--action-icon__icon--Color": 2,
    "--pf-topology__group--m-selected--topology__node__action-icon__icon--Color": 2,
    "--pf-topology__group__background--Fill": 6,
    "--pf-v5-global--BackgroundColor--light-300": 1,
    "--pf-topology__group__background--Stroke": 8,
    "--pf-topology__group--m-alt-group--topology__group__background--Fill": 3,
    "--pf-topology__group--m-selected--topology__group__background--Fill": 4,
    "--pf-topology__group--m-selected--topology__group__background--Stroke": 3,
    "--pf-topology__group--m-hover--topology__group__background--Stroke": 3,
    "--pf-v5-global--BackgroundColor--dark-400": 1,
    "--pf-topology__group--m-selected--m-hover--topology__group__background--Stroke": 3,
    "--pf-v5-global--palette--blue-600": 1,
    "--pf-topology__group--m-drop-target--topology__group__background--Fill": 1,
    "--pf-topology__group--m-drop-target--topology__group__background--Stroke": 3,
    "--pf-topology__group__collapsed-badge__node__label__badge__rect--Fill": 2,
    "--pf-topology__group__collapsed-badge__node__label__badge__rect--Stroke": 2,
    "--pf-topology__group__collapsed-badge__node__label__badge__text--Fill": 2,
    "--pf-v5-global--palette--black-800": 1,
    "--pf-topology__group__label__node__label__background--Fill": 2,
    "--pf-v5-global--BackgroundColor--dark-300": 1,
    "--pf-topology__group__label__node__label__background--StrokeWidth": 3,
    "--pf-topology__group__label__text--Fill": 2,
    "--pf-topology__group__label__node__action-icon__icon--Color": 2,
    "--pf-topology__group--m-selected--group__label__node__label__background--Fill": 3,
    "--pf-topology__edge--Stroke": 2,
    "--pf-topology__edge--StrokeWidth": 2,
    "--pf-topology__edge--HoverStroke": 3,
    "--pf-topology__edge--ActiveStroke": 3,
    "--pf-topology__edge--ActiveStrokeWidth": 2,
    "--pf-topology__edge--InteractiveStroke": 2,
    "--pf-topology__edge--m-info--EdgeStroke": 2,
    "--pf-topology__edge--m-success--EdgeStroke": 2,
    "--pf-topology__edge--m-warning--EdgeStroke": 2,
    "--pf-topology__edge--m-danger--EdgeStroke": 2,
    "--pf-topology__edge--m-selected--background--Stroke": 3,
    "--pf-topology__edge--m-hover--background--Stroke": 3,
    "--pf-topology__edge__tag__text--Fill": 3,
    "--pf-topology__edge__tag__text--Stroke": 3,
    "--pf-topology__edge__tag__background--Fill": 3,
    "--pf-topology__edge__tag--m-info--background--Fill": 2,
    "--pf-topology__edge__tag--m-success--background--Fill": 2,
    "--pf-topology__edge__tag--m-warning--background--Fill": 2,
    "--pf-topology__edge__tag--m-warning--text--Fill": 2,
    "--pf-topology__edge__tag--m-warning--text--Stroke": 2,
    "--pf-topology__edge__tag--m-danger--background--Fill": 2,
    "--pf-topology-connector-arrow--m-alt-connector-arrow--Fill": 2,
    "--pf-topology__connector-square--m-source--Fill": 2,
    "--pf-topology-default-create-connector__arrow--Fill": 3,
    "--pf-topology-default-create-connector--m-hover--line--Stroke": 3,
    "--pf-topology-default-create-connector--m-hover--arrow--Fill": 3,
    "--pf-topology-default-create-connector--m-hover--arrow--Stroke": 3,
    "--pf-v5-global--palette--black-300": 7,
    "--pf-v5-global--BackgroundColor--300": 4,
    "--pf-topology__group--m-alt-group--topology__group__background--Stroke": 2,
    "--pf-v5-global--active-color--300": 1,
    "--pf-v5-global--palette--blue-100": 1,
    "--pf-v5-global--palette--blue-300": 2,
    "--pf-topology__group__label__node__label__background--Stroke": 5,
    "--pf-topology__group--m-hover--label__node__label__background--Stroke": 3,
    "--pf-topology__group--m-selected--label__node__label__background--Stroke": 2,
    "--pf-v5-global--icon--FontSize--sm": 1,
    "--pf-v5-global--FontSize--xs": 3,
    "--pf-v5-global--BorderRadius--sm": 1,
    "--pf-v5-global--BoxShadow--sm": 1,
    "--pf-v5-global--BoxShadow--md": 2,
    "--pf-topology-pipelines__pill--Color": 4,
    "--pf-topology-pipelines__pill-text--FontSize": 2,
    "--pf-topology-pipelines__pill-text--FontFamily": 2,
    "--pf-v5-global--FontFamily--sans-serif": 1,
    "--pf-topology-pipelines__pill-background--Fill": 22,
    "--pf-topology-pipelines__pill-background--Stroke": 29,
    "--pf-topology-pipelines__pill-background--StrokeWidth": 7,
    "--pf-topology-pipelines__pill-background--m-danger--Fill": 3,
    "--pf-topology-pipelines__pill-background--m-success--Fill": 3,
    "--pf-topology-pipelines__pill-background--m-warning--Fill": 3,
    "--pf-topology-pipelines__pill-background--m-skipped--Fill": 2,
    "--pf-topology-pipelines__pill-background--m-in-progress--Fill": 3,
    "--pf-v5-global--info-color--100": 5,
    "--pf-topology-pipelines__pill-background--m-pending--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-running--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-idle--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-danger--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-success--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-warning--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-skipped--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-in-progress--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-pending--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-running--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-idle--Stroke": 4,
    "--pf-topology-pipelines__pill-background--m-selected--Fill": 2,
    "--pf-topology-pipelines__pill-background--m-selected--Stroke": 2,
    "--pf-topology-pipelines__pill-background--m-selected__text--Color": 1,
    "--pf-topology-pipelines__pill-background--m-selected--m-danger--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-selected--m-success--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-selected--m-warning--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-selected--m-skipped--Fill": 2,
    "--pf-topology-pipelines__pill-background--m-selected--m-in-progress--Fill": 1,
    "--pf-topology-pipelines__pill-background--m-selected--m-pending--Fill": 2,
    "--pf-topology-pipelines__pill-background--m-selected--m-running--Fill": 2,
    "--pf-topology-pipelines__pill-background--m-selected--m-idle--Fill": 2,
    "--pf-topology-pipelines__pill-text--Color": 12,
    "--pf-topology-pipelines__pill-text--m-selected--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-danger--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-success--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-warning--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-skipped--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-in-progress--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-pending--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-running--Color": 4,
    "--pf-topology-pipelines__pill-text--m-selected--m-idle--Color": 4,
    "--pf-topology-pipelines__pill-status--color": 20,
    "--pf-topology-pipelines__pill-status--m-danger--color": 2,
    "--pf-topology-pipelines__pill-status--m-success--color": 2,
    "--pf-topology-pipelines__pill-status--m-warning--color": 2,
    "--pf-topology-pipelines__pill-status--m-skipped--color": 2,
    "--pf-topology-pipelines__pill-status--m-in-progress--color": 2,
    "--pf-topology-pipelines__pill-status--m-pending--color": 2,
    "--pf-topology-pipelines__pill-status--m-running--color": 2,
    "--pf-topology-pipelines__pill-status--m-idle--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--color": 3,
    "--pf-topology-pipelines__pill-status--m-selected--m-danger--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-success--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-warning--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-skipped--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-in-progress--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-pending--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-running--color": 2,
    "--pf-topology-pipelines__pill-status--m-selected--m-idle--color": 2,
    "--pf-topology-pipelines__pill-badge--fill": 3,
    "--pf-topology-pipelines__pill-badge--text--fill": 3,
    "--pf-topology-pipelines__status-icon--color": 19,
    "--pf-topology-pipelines__status-icon--fill": 2,
    "--pf-topology-pipelines__status-icon--m-danger--color": 2,
    "--pf-topology-pipelines__status-icon--m-success--color": 2,
    "--pf-topology-pipelines__status-icon--m-warning--color": 2,
    "--pf-topology-pipelines__status-icon--m-skipped--color": 2,
    "--pf-topology-pipelines__status-icon--m-in-progress--color": 2,
    "--pf-topology-pipelines__status-icon--m-pending--color": 2,
    "--pf-topology-pipelines__status-icon--m-running--color": 2,
    "--pf-topology-pipelines__status-icon--m-idle--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--color": 3,
    "--pf-topology-pipelines__status-icon--m-selected--m-danger--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-success--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-warning--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-skipped--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-in-progress--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-pending--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-running--color": 2,
    "--pf-topology-pipelines__status-icon--m-selected--m-idle--color": 2,
    "--pf-topology-pipelines__when-expression-background--Stroke": 7,
    "--pf-v5-global--BorderColor--200": 3,
    "--pf-topology-pipelines__when-expression-background--Fill": 6,
    "--pf-topology-pipelines__when-expression--connector--Stroke": 1,
    "--pf-topology-pipelines__when-expression--m-danger--color": 1,
    "--pf-topology-pipelines__when-expression--m-success--color": 3,
    "--pf-topology-pipelines__when-expression--m-warning--color": 3,
    "--pf-topology-pipelines__when-expression--m-skipped--color": 3,
    "--pf-topology-pipelines__when-expression--m-in-progress--color": 3,
    "--pf-topology-pipelines__when-expression--m-selected--color": 3,
    "--pf-v5-global--BackgroundColor--150": 1,
    "--pf-topology-pipelines__pill__label__icon--Color": 1,
    "--pf-topology-pipelines__pill__action-icon__icon--Color": 1,
    "--pf-v5-global--BorderWidth--md": 5
  }
}