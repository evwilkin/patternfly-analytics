{
  "files": {
    "total": {
      "withPatternfly": {
        "tsx": 9,
        "js": 5,
        "scss": 1
      },
      "js": 21,
      "tsx": 11,
      "ts": 4,
      "scss": 1
    },
    "withPatternfly": {
      "tsx": {
        "files": [
          "/packages/module/patternfly-docs/content/examples/Advanced.tsx",
          "/packages/module/patternfly-docs/content/examples/AdvancedWithEmail.tsx",
          "/packages/module/patternfly-docs/content/examples/Async.tsx",
          "/packages/module/patternfly-docs/content/examples/i18n.tsx",
          "/packages/module/patternfly-docs/content/examples/URL.tsx",
          "/packages/module/src/Feedback/FeedbackError.tsx",
          "/packages/module/src/Feedback/FeedbackForm.tsx",
          "/packages/module/src/Feedback/FeedbackModalInternal.tsx",
          "/packages/module/src/Feedback/FeedbackSuccess.tsx"
        ]
      },
      "js": {
        "files": [
          "/packages/module/patternfly-docs/generated/extensions/react-user-feedback/design-guidelines.js",
          "/packages/module/patternfly-docs/generated/extensions/react-user-feedback/react.js",
          "/packages/module/patternfly-docs/generated/extensions/user-feedback/design-guidelines.js",
          "/packages/module/patternfly-docs/generated/extensions/user-feedback/react.js",
          "/packages/module/patternfly-docs/pages/index.js"
        ]
      },
      "scss": {
        "files": [
          "/packages/module/src/Feedback/Feedback.scss"
        ]
      }
    }
  },
  "imports": {
    "@patternfly/react-user-feedback": {
      "FeedbackModal": 7
    },
    "@patternfly/react-core": {
      "Button": 9,
      "Title": 1,
      "PageSection": 1,
      "Text": 4,
      "TextContent": 4,
      "TextVariants": 4,
      "Alert": 1,
      "Checkbox": 1,
      "Form": 1,
      "FormGroup": 1,
      "TextArea": 1,
      "TextInput": 1,
      "ValidatedOptions": 1,
      "Card": 1,
      "CardBody": 1,
      "CardTitle": 1,
      "Grid": 1,
      "GridItem": 1,
      "Modal": 1,
      "ModalVariant": 1
    },
    "@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg": {
      "feedbackImage": 4
    },
    "@patternfly/documentation-framework/components": {
      "AutoLinkHeader": 4,
      "Example": 4,
      "Link": 4
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\n\\nexport const BasicExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback='https://console.redhat.com/self-managed-feedback-form' \\n        onJoinMailingList='https://console.redhat.com/self-managed-research-form'\\n        onOpenSupportCase='http://www.redhat.com'\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Basic\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\nimport feedbackImage from '@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback={()=>\\n            // Example of a successful callback\\n             true\\n        }\\n        onJoinMailingList={()=>\\n            // Example of am unsuccessful callback\\n             false\\n        }\\n        onOpenSupportCase='http://www.redhat.com'\\n        feedbackImg={feedbackImage}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Advanced\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        feedbackLocale={i18nExample}\\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback={()=>\\n            // Example of a successful callback\\n             true\\n        }\\n        onJoinMailingList={()=>\\n             true\\n        }\\n        onOpenSupportCase='http://www.redhat.com'\\n        onReportABug={()=>true}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"i18n\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\n\\nexport const URLExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        onShareFeedback='https://pf-user-feedback-extension-form-demos.surge.sh/submitFeedback.html' \\n        onJoinMailingList='https://pf-user-feedback-extension-form-demos.surge.sh/joinMailingList.html'\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug='https://pf-user-feedback-extension-form-demos.surge.sh/reportBug.html'\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Basic modal\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\nimport feedbackImage from '@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        onShareFeedback={(email:string, feedback:string)=>{\\n            // Example of a successful callback\\n            console.log (`Email Address: ${email} Feedback: ${feedback}`);\\n            return true\\n        }}\\n        onJoinMailingList={(email:string)=>{\\n            // Example of am unsuccessful callback\\n            console.log (`Email Address: ${email}`);\\n            return false;\\n        }}\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={(email:string, bug:string)=>{\\n            console.log (`Email Address: ${email} Bug: ${bug}`)\\n            return true;}}\\n        feedbackImg={feedbackImage}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Advanced modal\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\nimport feedbackImage from '@patternfly/react-user-feedback/dist/esm/images/rh_feedback.svg';\\n\\nexport const AdvancedStaticEmailExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        email='test.user@patternfly.org'\\n        onShareFeedback={(email:string, feedback:string)=>{\\n            // Example of a successful callback\\n            console.log (`Email Address: ${email} Feedback: ${feedback}`);\\n            return true\\n        }}\\n        onJoinMailingList={(email:string)=>{\\n            // Example of am unsuccessful callback\\n            console.log (`Email Address: ${email}`);\\n            return false;\\n        }}\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={(email:string, bug:string)=>{\\n            console.log (`Email Address: ${email} Bug: ${bug}`)\\n            return true;}}\\n        feedbackImg={feedbackImage}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Advanced that autofills an email address\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\nexport const AsyncExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n\\n   const fakeNetworkCall = (email:string, feedback:string, bug:string) => new Promise<boolean>(resolve => {\\n      setTimeout(() => {\\n        console.log(`Email Address: ${email} Feedback: ${feedback} Bug: ${bug}`);\\n        console.log('Network call complete successfully so return true');\\n        resolve(true);\\n      }, 2000);\\n    })\\n  \\n   const simulatedAsyncCall = async (email='', feedback='', bug='') => {\\n        console.log('simulatedAsyncCall');\\n        const result = await fakeNetworkCall(email, feedback, bug);\\n        return result;\\n      }\\n      \\n\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        onShareFeedback={(email:string, feedback:string)=>simulatedAsyncCall(email, feedback)}\\n        onJoinMailingList={(email:string)=>simulatedAsyncCall(email)}\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={(email:string, bug:string)=>simulatedAsyncCall(email, '', bug)}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Modal with asynchronous call support\",\"lang\":\"js": {
      "React": 1
    },
    "react';\\nimport { FeedbackModal} from '@patternfly/react-user-feedback';\\nimport { Button } from '@patternfly/react-core';\\n\\nexport const AdvancedExample: React.FunctionComponent = () => {\\n   const  [isOpen, setIsOpen] = React.useState<boolean>(false);\\n   const handleButtonClicked = () => {setIsOpen(true)}; \\n   return <>\\n    <Button onClick={handleButtonClicked}>Show Modal</Button>\\n    <FeedbackModal \\n        feedbackLocale={i18nExample}\\n        email= \\\"test@redhat.com\\\" \\n        onShareFeedback={()=>\\n            // Example of a successful callback\\n             true\\n        }\\n        onJoinMailingList={()=>\\n             true\\n        }\\n        onOpenSupportCase='https://pf-user-feedback-extension-form-demos.surge.sh/requestSupport.html'\\n        onReportABug={()=>true}\\n        isOpen={isOpen}\\n        onClose={()=>setIsOpen(false)}/>\\n    </>\\n}\",\"title\":\"Modal with internationalization support\",\"lang\":\"js": {
      "React": 1
    },
    "@patternfly/react-icons/dist/esm/icons/error-circle-o-icon": {
      "ErrorIcon": 1
    },
    "@patternfly/react-icons": {
      "ExternalLinkAltIcon": 1
    },
    "@patternfly/react-icons/dist/js/icons/check-icon": {
      "CheckIcon": 1
    }
  },
  "classes": {
    "pf-u-mx-auto": 2,
    "pf-u-mt-20": 1,
    "pf-u-font-family-heading-sans-serif": 1,
    "pf-c-content": 1,
    "pf-c-modal-box__body": 2,
    "pf-c-modal-box": 1,
    "pf-c-button": 1
  },
  "cssVars": {
    "--pf-v5-c-content--MarginBottom": 1,
    "--pf-v5-global--spacer--sm": 3,
    "--pf-v5-global--link--Color": 1,
    "--pf-v5-global--spacer--lg": 4,
    "--pf-v5-global--spacer--md": 4,
    "--pf-v5-global--palette--black-150": 1,
    "--pf-v5-global--palette--black-500": 1
  },
  "repo": "https://github.com/patternfly/react-user-feedback.git",
  "name": "PatternFly React User Feedback",
  "date": "2023-09-13T20:16:20.664Z",
  "dependencies": {
    "@babel/core": 1,
    "@babel/preset-env": 1,
    "@babel/preset-flow": 1,
    "@babel/preset-react": 1,
    "@babel/preset-typescript": 1,
    "@patternfly/documentation-framework": 1,
    "@patternfly/patternfly": 1,
    "@patternfly/patternfly-a11y": 1,
    "@patternfly/react-code-editor": 1,
    "@patternfly/react-core": 1,
    "@patternfly/react-icons": 1,
    "@patternfly/react-table": 1,
    "@testing-library/dom": 1,
    "@testing-library/jest-dom": 1,
    "@testing-library/react": 1,
    "@testing-library/user-event": 1,
    "@types/react": 2,
    "@types/react-dom": 2,
    "@typescript-eslint/eslint-plugin": 1,
    "@typescript-eslint/parser": 1,
    "babel-jest": 1,
    "chokidar": 1,
    "concurrently": 1,
    "copyfiles": 1,
    "eslint": 1,
    "eslint-config-prettier": 1,
    "eslint-config-standard-with-typescript": 1,
    "eslint-plugin-import": 1,
    "eslint-plugin-markdown": 1,
    "eslint-plugin-n": 1,
    "eslint-plugin-prettier": 1,
    "eslint-plugin-promise": 1,
    "eslint-plugin-react": 1,
    "eslint-plugin-react-hooks": 1,
    "fs-extra": 1,
    "glob": 1,
    "husky": 1,
    "jest": 1,
    "jest-canvas-mock": 1,
    "jest-environment-jsdom": 1,
    "node-sass-package-importer": 1,
    "prettier": 1,
    "react": 3,
    "react-dom": 3,
    "rimraf": 2,
    "sass": 1,
    "serve": 1,
    "typescript": 2,
    "utility-types": 1
  }
}